<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<meta name="robots" content="noindex,nofollow">
		
		<meta name="twitter:card" content="summary" />
		<meta name="twitter:site" content="@MoarTubes" />
		<meta name="twitter:title" content="MoarTube" />
		<meta name="twitter:description" content="A decentralized video platform that puts you in control." />
		<meta name="twitter:image" content="http://www.moartube.com/images/logo.jpg" />
		
		<meta property="og:site_name" content="MoarTube.com" />
		<meta property="og:title" content="MoarTube" />
		<meta property="og:description" content="A decentralized video platform that puts you in control." />
		<meta property="og:type" content="desktopprofile" />
		<meta property="og:image" content="http://www.moartube.com/images/logo.jpg" />
		
		<title>MoarTube</title>
		<link rel="icon" type="image/x-icon" href="/assets/resources/images/favicon.ico">
		<link href="/assets/resources/css/keen-slider-6.8.5.min.css" rel="stylesheet" type="text/css"/> <!--recommendations slider-->
		<link href="/assets/resources/css/videojs-8.3.0.css" rel="stylesheet" type="text/css"/>
		<link href="/assets/resources/css/videojs-theme.css" rel="stylesheet" type="text/css"/>
		<link href="/assets/resources/css/bootstrap.min-5.3.0.css" rel="stylesheet" type="text/css"/>
		<link href="/assets/resources/css/sweetalert2-11.0.11.min.css" rel="stylesheet" type="text/css" />
		<script src="/assets/resources/javascript/jquery-3.6.4.min.js"></script>
		<script src="/assets/resources/javascript/popper-2.11.6.min.js"></script> <!--popup menus, such as report buttons-->
		<script src="/assets/resources/javascript/bootstrap-5.3.0.min.js"></script>
		<style>
			body {
				background: #f9f9f9;
				font-weight: 400;
				line-height: 1.6;
				margin: 0 0 100px 0;
				padding: 0;
			}
			
			#comments-container, .card {
				background: #f5f5f5;
			}

			#recommended-videos {
				margin-left: 20px;
			}
			
			#video-information-container span {
				color: #606060;
			}
			
			.img-fluid {
				width: 100%;
			}
			
			textarea { 
				outline: none;
			}
			
			.btn-primary {
				--bs-btn-color: #fff;
				--bs-btn-bg: #cb0c9f;
				--bs-btn-border-color: #cb0c9f;
				--bs-btn-hover-color: #fff;
				--bs-btn-hover-bg: #cb0c9f;
				--bs-btn-hover-border-color: #cb0c9f;
				--bs-btn-focus-shadow-rgb: 49,132,253;
				--bs-btn-active-color: #cb0c9f;
				--bs-btn-active-bg: white;
				--bs-btn-active-border-color: #cb0c9f;
				--bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
				--bs-btn-disabled-color: #fff;
				--bs-btn-disabled-bg: #cb0c9f;
				--bs-btn-disabled-border-color: #cb0c9f;
			}
			
			.btn-outline-primary {
				--bs-btn-color: #cb0c9f;
				--bs-btn-border-color: #cb0c9f;
				--bs-btn-hover-color: #cb0c9f;
				--bs-btn-hover-bg: #cb0c9f;
				--bs-btn-hover-border-color: #cb0c9f;
				--bs-btn-focus-shadow-rgb: 13,110,253;
				--bs-btn-active-color: #fff;
				--bs-btn-active-bg: #cb0c9f;
				--bs-btn-active-border-color: #cb0c9f;
				--bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
				--bs-btn-disabled-color: #cb0c9f;
				--bs-btn-disabled-bg: transparent;
				--bs-btn-disabled-border-color: #cb0c9f;
				--bs-gradient: none;
			}
			
			.btn.recommendation-category-button.active, .btn.recommendation-category-button:first-child:active {
				--bs-btn-active-color: #cb0c9f;
				--bs-btn-active-bg: white;
			}

			.btn.recommendation-category-button-selected.active, .btn.recommendation-category-button-selected:first-child:active {
				--bs-btn-active-color: #fff;
				--bs-btn-active-bg: #cb0c9f;
			}
		
			.btn.recommendation-category-button-selected {
				--bs-btn-color: #fff;
				--bs-btn-bg: #cb0c9f;
				--bs-btn-border-color: #cb0c9f;
				--bs-btn-hover-color: #fff;
				--bs-btn-hover-bg: #cb0c9f;
				--bs-btn-hover-border-color: #cb0c9f;
				--bs-btn-focus-shadow-rgb: 49,132,253;
				--bs-btn-active-color: #cb0c9f;
				--bs-btn-active-bg: white;
				--bs-btn-active-border-color: #cb0c9f;
				--bs-btn-active-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
				--bs-btn-disabled-color: #fff;
				--bs-btn-disabled-bg: #cb0c9f;
				--bs-btn-disabled-border-color: #cb0c9f;
			}
			
			.btn-outline-primary:hover {
				background-color: inherit;
				text-decoration: none;
			}
		
			.btn.recommendation-category-button-selected:hover {
				background-color: #cb0c9f;
			}
					
			.btn.recommendation-category-button-selected:hover {
				color: white;
			}
					
			.btn.recommendation-category-button {
				font-size: 13px;
			}
					
			#overflow-dropdown-button.show:hover {
				background-color: #cb0c9f;
			}
			
			.captcha-container {
				height: 50px;
			}
			
			div.reply {
				background-color: #f9f9f9;
				border: 1px solid #b7c5d9;
				border-left: none;
				border-bottom: none;
				border-right: none;
				display: table;
				padding: 2px;
			}
			
			div.post {
				width: 100%;
				overflow: hidden;
			}

			div.post div.postInfo {
				display: block;
				width: 100%;
			}

			div.post div.postInfo span.nameBlock {
				display: inline-block;
			}

			div.post div.postInfo span.nameBlock span.name {
				color: #cb0c9f;
				font-weight: 700;
			}

			.posteruid .hand {
				padding: 0 5px;
				border-radius: 6px;
				font-size: 0.8em;
			}

			div.post div.postInfo span.postNum a {
				text-decoration: none;
				color: #000;
			}

			.postMenuBtn {
				margin-left: 5px;
				text-decoration: none;
				line-height: 1em;
				display: inline-block;
				-webkit-transition: -webkit-transform 0.1s;
				-moz-transition: -moz-transform 0.1s;
				transition: transform 0.1s;
				width: 1em;
				height: 1em;
				text-align: center;
				outline: none;
				opacity: 0.8;
			}

			div.backlink {
				font-size: 0.8em !important;
				display: inline;
				padding: 0;
				padding-left: 5px;
			}

			.backlink span {
				padding: 0;
			}

			.burichan_new .backlink a, .yotsuba_b_new .backlink a {
				color: #34345C !important;
			}

			.quoteLink, .deadlink {
				color: #d00;
			}

			.quoteLink {
				text-decoration: underline;
			}

			.deadlink {
				text-decoration: line-through;
			}

			div.post blockquote.postMessage {
				display: block;
			}

			blockquote {
				display: block;
				margin-block-start: 1em;
				margin-block-end: 1em;
				margin-inline-start: 40px;
				margin-inline-end: 40px;
			}

			blockquote>span.quote {
				color: #789922;
			}

			.reply:target, .reply.highlight {
				background: #ede3eb!important;
				border: 1px solid #ba9dbf!important;
				border-left: none!important;
				border-bottom: none!important;
				padding: 2px;
			}

			.reply.highlight-anti {
				border-width: 1px !important;
				background-color: #bfa6ba !important;
			}

			#quote-preview .reply.highlight {
				border-left: 1px solid #ba9dbf!important;
				border-bottom: 1px solid #ba9dbf!important;
			}
			
			.mobile, .mobileinline, .mobileib {
				display: none!important;
			}

			.posteruid .hand {
				padding: 0 5px;
				border-radius: 6px;
				font-size: 0.8em;
			}
			.hand {
				cursor: pointer;
			}
			
			.list-group-item {
				padding: 0px;
			}
			
			.swal2-input {
				padding: 0.5rem 0.75rem;
				font-size: .875rem;
				font-weight: 400;
				line-height: 1.4rem;
				color: #495057;
				background-color: #fff;
				background-clip: padding-box;
				border: 1px solid #d2d6da;
			}

			.swal2-input {
				margin: 0;
				width: 100%;
			}

			.swal2-textarea {
				margin: 0;
				width: 100%;
			}

			.swal2-styled.swal2-confirm {
				border: 0;
				border-radius: 0.25em;
				background: initial;
				background-color: #7367f0;
				color: #fff;
				font-size: 1em;
			}
			.swal2-styled.swal2-confirm {
				background-image: linear-gradient(310deg,#7928ca,#ff0080);
				background-color: transparent;
				--bs-btn-padding-y: 0.75rem;
				--bs-btn-padding-x: 1.5rem;
				--bs-btn-font-size: 0.75rem;
				--bs-btn-border-radius: 0.5rem
			}

			.swal2-styled.swal2-confirm:focus,.swal2-styled.swal2-confirm:hover {
				background-image: linear-gradient(130deg,#7928ca,#ff0080)!important;
				outline: 0;
				box-shadow: 0 3px 5px -1px rgba(0,0,0,.09),0 2px 3px -1px rgba(0,0,0,.07)
			}
			.form-control:focus {
				border-left: 1px solid #e293d3!important;
				border-right: 1px solid #e293d3!important
			}

			.form-control:focus {
				color: #495057;
				background-color: #fff;
				border-color: #e293d3;
				outline: 0;
				box-shadow: 0 0 0 2px #e9aede
			}

			.keen-slider:not([data-keen-slider-disabled]) .keen-slider__slide {
				overflow: visible;
				width: auto;
			}

			.adaptive-video-player-theater-mode {
				width: 100%;
				max-height: calc(100vh - 10vh) !important;
			}

			.video-player-theater-mode {
				width: 100%;
				max-height: calc(100vh - 10vh) !important;
				position: unset;
			}

			.video-player-dimensions.vjs-fluid:not(.vjs-audio-only-mode) {
				padding-top: calc(100vh - 10vh) !important
			}

			#video-information-description {
				white-space: pre-line;
			}

			.video-streaming-timestamp {
				position: absolute;
				right: 5px;
				bottom: 5px;
				background-color: rgba(0, 0, 0, 0.8);
				color: white;
				border-radius: 4px;
				padding: 3px;
				font-size: 11px;
				font-weight: 500;
				width: unset;
			}

			@media (min-width: 0px) {
				.container-fluid {
					width: 100%;
				}
				
				#comment-section {
					display: none;
				}
				
				#expand-comment-section {
					display: block;
				}
				
				#navbar-responsive-node-avatar {
					display: block;
				}
				
				#navbar-list-node-avatar {
					display: none;
				}
				
				.video-js-theater-button {
					display: none !important;
				}
				
				.video-js-streamer-button {
					display: none !important;
				}
			}

			@media (min-width: 992px) {
				.container-fluid {
					width: 70%;
				}
				
				#comment-section {
					display: block;
				}
				
				#expand-comment-section {
					display: none;
				}
				
				#navbar-responsive-node-avatar {
					display: none;
				}
				
				#navbar-list-node-avatar {
					display: block;
				}
				
				.video-js-theater-button {
					display: inline-block !important;
				}
				
				.video-js-streamer-button {
					display: inline-block !important;
				}
			}
			
			@media (max-width: 1366px) {
				.container-fluid {
					width: 100%;
				}
			}

			.text-primary {
				color: #cb0c9f!important;
			}

			.hidden-elem {
				display: none !important;
			}
			
			
			
			.mtp-large-play-button {
				position: absolute;
				width: 68px;
				height: 48px;
				margin-left: -34px;
				margin-top: -24px;
				left: 50%;
				top: 50%;
				fill: #cb0c9f;
				fill-opacity: 1;
				-webkit-transition: opacity .25s cubic-bezier(0,0,.2,1);
				-o-transition: opacity .25s cubic-bezier(0,0,.2,1);
				transition: opacity .25s cubic-bezier(0,0,.2,1);
				z-index: 1;
			}
			
			.mtp-large-play-button svg {
				pointer-events: none;
				position: absolute;
				width: 100%;
				height: 100%;
				top: 0;
				left: 0;
			}

			.mtp-button {
				border: none;
				background-color: transparent;
				padding: 0;
				color: inherit;
				text-align: inherit;
				font-size: 100%;
				font-family: inherit;
				cursor: default;
				line-height: inherit;
			}
			
			#mtp-video-overlay-info {
				z-index: 9
			}
			
			.vjs-big-play-button  {
				display: none !important;
			}
			
			@media (max-width: 576.0px) {
				.row.gutters {
					--bs-gutter-x: 0 !important;
					--bs-gutter-y: 0 !important;
				}
			}
			
			.share-icon-container {
				display: inline-block;
				margin-right: 8px;
			}
			
			.share-icon-button {
				margin: 1px 0;
				border: none;
				border-radius: 3px;
				padding: 5px 1px 2px;
				outline: none;
				text-align: inherit;
				font-family: inherit;
				background-color: transparent;
				cursor: pointer;
			}

			.share-icon-svg {
				height: 60px;
				width: 60px;
				margin-left: 4px;
				margin-right: 4px;
				margin-bottom: 8px;
			}
			
			.share-icon-title {
				color: black;
				margin: auto;
				width: 68px;
				max-height: 42px;
				text-align: center;
				white-space: normal;
				overflow: hidden;
				font-family: "Roboto","Arial",sans-serif;
				font-size: 14px;
				line-height: 1.8rem;
				font-weight: 400;
			}
			
			.input-group, .input-group .input-group-text {
				transition: box-shadow .15s ease,border-color .15s ease;
			}

			.input-group {
				border-radius: 0.5rem;
			}

			.form-control {
				border-radius: 0.5rem;
				border-top-right-radius: 0.5rem!important;
				border-bottom-right-radius: 0.5rem!important;
				border-left-width: 1px;
			}

			.me-1 {
				margin-right: 0.25rem!important;
			}

			.form-control {
				display: block;
				width: 100%;
				padding: 0.5rem 0.75rem;
				font-size: .875rem;
				font-weight: 400;
				line-height: 1.4rem;
				color: #495057;
				background-color: #fff;
				background-clip: padding-box;
				border: 1px solid #d2d6da;
				appearance: none;
				transition: box-shadow .15s ease,border-color .15s ease;
			}

			.form-control {
			font-family: "Open Sans";
			}

			.share-copy-button.btn {
				--bs-btn-padding-x: 1.2rem;
				--bs-btn-padding-y: 0.75rem;
				--bs-btn-font-size: 0.75rem;
				--bs-btn-font-weight: 700;
				--bs-btn-line-height: 1.4;
				--bs-btn-border-width: 1px;
				--bs-btn-border-radius: 0.5rem;
				--bs-btn-box-shadow: 0 4px 7px -1px rgba(0,0,0,.11),0 2px 4px -1px rgba(0,0,0,.07);
				--bs-btn-disabled-opacity: 0.65;
				--bs-btn-focus-box-shadow: 0 0 0 0.2rem rgba(var(--bs-btn-focus-shadow-rgb),.5);
				display: inline-block;
				padding: var(--bs-btn-padding-y) var(--bs-btn-padding-x);
				font-family: var(--bs-btn-font-family);
				font-size: var(--bs-btn-font-size);
				font-weight: var(--bs-btn-font-weight);
				line-height: var(--bs-btn-line-height);
				color: var(--bs-btn-color);
				text-align: center;
				vertical-align: middle;
				cursor: pointer;
				user-select: none;
				border: var(--bs-btn-border-width) solid var(--bs-btn-border-color);
				border-radius: var(--bs-btn-border-radius);
				background-color: var(--bs-btn-bg);
				transition: all .15s ease-in;
			}

			#update-comments-spinner {
				width: 1rem;
				height: 1rem;
				border-width: 0.15rem;
			}

			.video-js.vjs-paused:not(.vjs-has-started) .vjs-loading-spinner {
				display: block;
				visibility: visible;
			}

			.video-js.vjs-paused:not(.vjs-has-started) .vjs-loading-spinner,
			.video-js.vjs-paused:not(.vjs-has-started) .vjs-loading-spinner {
				-webkit-animation: vjs-spinner-spin 1.1s cubic-bezier(0.6, 0.2, 0, 0.8) infinite, vjs-spinner-fade 1.1s linear infinite;
				animation: vjs-spinner-spin 1.1s cubic-bezier(0.6, 0.2, 0, 0.8) infinite, vjs-spinner-fade 1.1s linear infinite;
			}

			.navbar-settings-button {
				color: #cb0c9f;
			}

			#moartube-logo-dark {
				display: none;
			}

			.new-comment-highlight {
				background-color: #cb0c9f14 !important;
			}

			@media (prefers-color-scheme: dark) {
				body {
					background-color: #1e1e1e;
				}
				
				#recommended-videos-list-container {
					background-color: #1e1e1e;
				}
				
				#live-stream-chat-container {
					background-color: #353535;
				}
				
				.live-chat-text-color {
					color: white;
				}
				
				#send-chat-message-input {
					background-color: black;
					color: white;
				}
				
				#send-chat-message-input::placeholder {
					color: grey;
					opacity: 1; /* Firefox */
				}
				
				.video-recommendation-card {
					border: 0px;
					background-color: #353535;
					color: #efefef;
				}
				
				.video-recommendation-card-text {
					color: #efefef;
				}
				
				.comment-input-text-area {
					background-color: black;
					color: white;
				}
				
				.comment-input-text-area::placeholder  {
					color: grey;
					opacity: 1; /* Firefox */
				}
				
				#comments-container .replyContainer .reply {
					background-color: #353535;
					color: #efefef;
				}
				
				#comments-container .replyContainer .reply .quotelink {
					color: #ff6767;
				}
				
				#comments-container .replyContainer .reply .postNum a {
					color: grey;
				}
				
				.captcha-container img {
					background-color: white;
				}
				
				#video-comments-outer {
					color: #efefef;
				}
				
				.btn-outline-primary {
					color: grey !important;
				}
				
				.btn-primary {
					color: white !important;
				}
				
				.recommendation-category-button-selected {
					color: white !important;
				}
				
				.reply:target, .reply.highlight {
					background: #2f2f2f !important;
				}
				
				#moartube-logo-light {
					display: none !important;
				}
				
				#moartube-logo-dark {
					display: block !important;
				}

				.new-comment-highlight {
					background-color: black !important;
				}
			}
		</style>
		
		<script>
			function addStyles(css) {
				const style = document.createElement('style');
				
				style.id = 'dark-mode-style';
				style.type = 'text/css';
				
				style.appendChild(document.createTextNode(css));
				
				document.head.appendChild(style);
			}
			
			const darkModeStyles = `
body {
	background-color: #1e1e1e;
}

#recommended-videos-list-container {
	background-color: #1e1e1e;
}

#live-stream-chat-container {
	background-color: #353535;
}

.live-chat-text-color {
	color: white;
}

#send-chat-message-input {
	background-color: black;
	color: white;
}

#send-chat-message-input::placeholder {
	color: grey;
	opacity: 1; /* Firefox */
}

.video-recommendation-card {
	border: 0px;
	background-color: #353535;
	color: #efefef;
}

.video-recommendation-card-text {
	color: #efefef;
}

.comment-input-text-area {
	background-color: black;
	color: white;
}

.comment-input-text-area::placeholder  {
	color: grey;
	opacity: 1; /* Firefox */
}

#comments-container .replyContainer .reply {
	background-color: #353535;
	color: #efefef;
}

#comments-container .replyContainer .reply .quotelink {
	color: #ff6767;
}

#comments-container .replyContainer .reply .postNum a {
	color: grey;
}

.captcha-container img {
	background-color: white;
}

#video-comments-outer {
	color: #efefef;
}

.btn-outline-primary {
	color: grey !important;
}

.btn-primary {
	color: white !important;
}

.recommendation-category-button-selected {
	color: white !important;
}

.reply:target, .reply.highlight {
	background: #2f2f2f !important;
}

#moartube-logo-light {
	display: none !important;
}

#moartube-logo-dark {
	display: block !important;
}

.new-comment-highlight {
	background-color: black !important;
}
`;
			
			addStyles(darkModeStyles);
			
			if (localStorage.getItem('dark-mode-enabled') !== 'true') {
				const styleSheet = document.getElementById('dark-mode-style');
				
				styleSheet.disabled = true;
			}
		</script>
	</head>
	<body>
		<nav class="navbar navbar-expand-xl navbar-light">
			<div class="container-fluid w-100">
				<a id="moartube-logo" class="navbar-brand" href="http://www.moartube.com">
					<svg viewBox="169.022 81.466 89.186 20.228" xmlns="http://www.w3.org/2000/svg" style="width: 90px; height: 20px;" id="moartube-logo-light">
					<g transform="matrix(1, 0, 0, 1, 169.021713, 81.694077)">
					<path d="M27.9727 3.12324C27.6435 1.89323 26.6768 0.926623 25.4468 0.597366C23.2197 2.24288e-07 14.285 0 14.285 0C14.285 0 5.35042 2.24288e-07 3.12323 0.597366C1.89323 0.926623 0.926623 1.89323 0.597366 3.12324C2.24288e-07 5.35042 0 10 0 10C0 10 2.24288e-07 14.6496 0.597366 16.8768C0.926623 18.1068 1.89323 19.0734 3.12323 19.4026C5.35042 20 14.285 20 14.285 20C14.285 20 23.2197 20 25.4468 19.4026C26.6768 19.0734 27.6435 18.1068 27.9727 16.8768C28.5701 14.6496 28.5701 10 28.5701 10C28.5701 10 28.5677 5.35042 27.9727 3.12324Z" fill="#cb0c9f"></path>
					<path d="M 14.425 14.285 L 21.848 10 L 14.425 5.715 L 14.425 14.285 Z" fill="white"></path>
					<path d="M 8.425 14.285 L 15.848 10 L 8.425 5.715 L 8.425 14.285 Z" fill="white"></path>
					</g>
					<path d="M 204.012 71.432 L 204.012 60.552 L 207.3 60.552 L 209.274 67.973 L 211.226 60.552 L 214.522 60.552 L 214.522 71.432 L 212.481 71.432 L 212.481 62.867 L 210.321 71.432 L 208.206 71.432 L 206.053 62.867 L 206.053 71.432 Z M 215.202 67.38 Q 215.202 66.341 215.714 65.368 Q 216.226 64.396 217.165 63.884 Q 218.104 63.372 219.262 63.372 Q 221.05 63.372 222.193 64.533 Q 223.336 65.695 223.336 67.469 Q 223.336 69.257 222.182 70.434 Q 221.028 71.61 219.276 71.61 Q 218.193 71.61 217.209 71.12 Q 216.226 70.63 215.714 69.684 Q 215.202 68.738 215.202 67.38 Z M 217.339 67.491 Q 217.339 68.664 217.896 69.287 Q 218.453 69.911 219.269 69.911 Q 220.085 69.911 220.638 69.287 Q 221.191 68.664 221.191 67.476 Q 221.191 66.318 220.638 65.695 Q 220.085 65.071 219.269 65.071 Q 218.453 65.071 217.896 65.695 Q 217.339 66.318 217.339 67.491 Z M 225.529 65.955 L 223.636 65.613 Q 223.955 64.47 224.735 63.921 Q 225.514 63.372 227.05 63.372 Q 228.446 63.372 229.128 63.702 Q 229.811 64.032 230.09 64.541 Q 230.368 65.049 230.368 66.407 L 230.346 68.842 Q 230.346 69.881 230.446 70.374 Q 230.546 70.868 230.821 71.432 L 228.757 71.432 Q 228.676 71.224 228.557 70.816 Q 228.505 70.63 228.483 70.571 Q 227.948 71.091 227.34 71.35 Q 226.731 71.61 226.041 71.61 Q 224.824 71.61 224.122 70.95 Q 223.421 70.289 223.421 69.28 Q 223.421 68.612 223.74 68.088 Q 224.059 67.565 224.634 67.287 Q 225.21 67.009 226.293 66.801 Q 227.755 66.526 228.319 66.289 L 228.319 66.081 Q 228.319 65.48 228.023 65.224 Q 227.726 64.968 226.902 64.968 Q 226.345 64.968 226.033 65.186 Q 225.722 65.405 225.529 65.955 Z M 228.319 67.647 Q 227.919 67.78 227.05 67.966 Q 226.182 68.152 225.915 68.33 Q 225.507 68.619 225.507 69.064 Q 225.507 69.502 225.833 69.821 Q 226.16 70.141 226.664 70.141 Q 227.228 70.141 227.741 69.769 Q 228.119 69.487 228.238 69.079 Q 228.319 68.812 228.319 68.062 Z M 233.418 71.432 L 231.333 71.432 L 231.333 63.55 L 233.27 63.55 L 233.27 64.671 Q 233.767 63.877 234.164 63.624 Q 234.561 63.372 235.066 63.372 Q 235.779 63.372 236.439 63.765 L 235.793 65.584 Q 235.266 65.242 234.814 65.242 Q 234.376 65.242 234.071 65.483 Q 233.767 65.725 233.593 66.355 Q 233.418 66.986 233.418 68.998 Z M 238.801 71.432 L 238.801 62.392 L 235.572 62.392 L 235.572 60.552 L 244.219 60.552 L 244.219 62.392 L 240.998 62.392 L 240.998 71.432 Z M 248.679 71.432 L 248.679 70.252 Q 248.249 70.883 247.547 71.246 Q 246.846 71.61 246.067 71.61 Q 245.272 71.61 244.642 71.261 Q 244.011 70.912 243.729 70.282 Q 243.447 69.651 243.447 68.537 L 243.447 63.55 L 245.532 63.55 L 245.532 67.172 Q 245.532 68.834 245.647 69.209 Q 245.762 69.584 246.067 69.803 Q 246.371 70.022 246.838 70.022 Q 247.373 70.022 247.796 69.729 Q 248.219 69.436 248.375 69.001 Q 248.531 68.567 248.531 66.875 L 248.531 63.55 L 250.616 63.55 L 250.616 71.432 Z M 251.685 71.432 L 251.685 60.552 L 253.77 60.552 L 253.77 64.47 Q 254.735 63.372 256.056 63.372 Q 257.496 63.372 258.439 64.415 Q 259.381 65.457 259.381 67.409 Q 259.381 69.428 258.42 70.519 Q 257.459 71.61 256.086 71.61 Q 255.411 71.61 254.754 71.272 Q 254.097 70.935 253.622 70.274 L 253.622 71.432 Z M 253.755 67.32 Q 253.755 68.545 254.141 69.131 Q 254.683 69.962 255.581 69.962 Q 256.271 69.962 256.758 69.372 Q 257.244 68.782 257.244 67.513 Q 257.244 66.162 256.754 65.565 Q 256.264 64.968 255.5 64.968 Q 254.75 64.968 254.253 65.55 Q 253.755 66.133 253.755 67.32 Z M 264.621 68.923 L 266.699 69.272 Q 266.298 70.415 265.434 71.013 Q 264.569 71.61 263.27 71.61 Q 261.214 71.61 260.227 70.267 Q 259.448 69.191 259.448 67.55 Q 259.448 65.591 260.472 64.481 Q 261.496 63.372 263.062 63.372 Q 264.821 63.372 265.838 64.533 Q 266.855 65.695 266.81 68.092 L 261.585 68.092 Q 261.608 69.02 262.09 69.536 Q 262.572 70.052 263.292 70.052 Q 263.782 70.052 264.116 69.784 Q 264.45 69.517 264.621 68.923 Z M 264.74 66.816 Q 264.717 65.91 264.272 65.439 Q 263.827 64.968 263.188 64.968 Q 262.506 64.968 262.06 65.465 Q 261.615 65.962 261.622 66.816 Z" transform="matrix(0.915771, 0, 0, 1.777663, 13.868996, -26.174692)" style="white-space: pre;"></path>
					</svg>
					
					<svg viewBox="169.022 81.466 89.186 20.228" xmlns="http://www.w3.org/2000/svg" style="width: 90px; height: 20px;" fill="#efefef" id="moartube-logo-dark">
					<g transform="matrix(1, 0, 0, 1, 169.021713, 81.694077)">
					<path d="M27.9727 3.12324C27.6435 1.89323 26.6768 0.926623 25.4468 0.597366C23.2197 2.24288e-07 14.285 0 14.285 0C14.285 0 5.35042 2.24288e-07 3.12323 0.597366C1.89323 0.926623 0.926623 1.89323 0.597366 3.12324C2.24288e-07 5.35042 0 10 0 10C0 10 2.24288e-07 14.6496 0.597366 16.8768C0.926623 18.1068 1.89323 19.0734 3.12323 19.4026C5.35042 20 14.285 20 14.285 20C14.285 20 23.2197 20 25.4468 19.4026C26.6768 19.0734 27.6435 18.1068 27.9727 16.8768C28.5701 14.6496 28.5701 10 28.5701 10C28.5701 10 28.5677 5.35042 27.9727 3.12324Z" fill="#cb0c9f"></path>
					<path d="M 14.425 14.285 L 21.848 10 L 14.425 5.715 L 14.425 14.285 Z" fill="white"></path>
					<path d="M 8.425 14.285 L 15.848 10 L 8.425 5.715 L 8.425 14.285 Z" fill="white"></path>
					</g>
					<path d="M 204.012 71.432 L 204.012 60.552 L 207.3 60.552 L 209.274 67.973 L 211.226 60.552 L 214.522 60.552 L 214.522 71.432 L 212.481 71.432 L 212.481 62.867 L 210.321 71.432 L 208.206 71.432 L 206.053 62.867 L 206.053 71.432 Z M 215.202 67.38 Q 215.202 66.341 215.714 65.368 Q 216.226 64.396 217.165 63.884 Q 218.104 63.372 219.262 63.372 Q 221.05 63.372 222.193 64.533 Q 223.336 65.695 223.336 67.469 Q 223.336 69.257 222.182 70.434 Q 221.028 71.61 219.276 71.61 Q 218.193 71.61 217.209 71.12 Q 216.226 70.63 215.714 69.684 Q 215.202 68.738 215.202 67.38 Z M 217.339 67.491 Q 217.339 68.664 217.896 69.287 Q 218.453 69.911 219.269 69.911 Q 220.085 69.911 220.638 69.287 Q 221.191 68.664 221.191 67.476 Q 221.191 66.318 220.638 65.695 Q 220.085 65.071 219.269 65.071 Q 218.453 65.071 217.896 65.695 Q 217.339 66.318 217.339 67.491 Z M 225.529 65.955 L 223.636 65.613 Q 223.955 64.47 224.735 63.921 Q 225.514 63.372 227.05 63.372 Q 228.446 63.372 229.128 63.702 Q 229.811 64.032 230.09 64.541 Q 230.368 65.049 230.368 66.407 L 230.346 68.842 Q 230.346 69.881 230.446 70.374 Q 230.546 70.868 230.821 71.432 L 228.757 71.432 Q 228.676 71.224 228.557 70.816 Q 228.505 70.63 228.483 70.571 Q 227.948 71.091 227.34 71.35 Q 226.731 71.61 226.041 71.61 Q 224.824 71.61 224.122 70.95 Q 223.421 70.289 223.421 69.28 Q 223.421 68.612 223.74 68.088 Q 224.059 67.565 224.634 67.287 Q 225.21 67.009 226.293 66.801 Q 227.755 66.526 228.319 66.289 L 228.319 66.081 Q 228.319 65.48 228.023 65.224 Q 227.726 64.968 226.902 64.968 Q 226.345 64.968 226.033 65.186 Q 225.722 65.405 225.529 65.955 Z M 228.319 67.647 Q 227.919 67.78 227.05 67.966 Q 226.182 68.152 225.915 68.33 Q 225.507 68.619 225.507 69.064 Q 225.507 69.502 225.833 69.821 Q 226.16 70.141 226.664 70.141 Q 227.228 70.141 227.741 69.769 Q 228.119 69.487 228.238 69.079 Q 228.319 68.812 228.319 68.062 Z M 233.418 71.432 L 231.333 71.432 L 231.333 63.55 L 233.27 63.55 L 233.27 64.671 Q 233.767 63.877 234.164 63.624 Q 234.561 63.372 235.066 63.372 Q 235.779 63.372 236.439 63.765 L 235.793 65.584 Q 235.266 65.242 234.814 65.242 Q 234.376 65.242 234.071 65.483 Q 233.767 65.725 233.593 66.355 Q 233.418 66.986 233.418 68.998 Z M 238.801 71.432 L 238.801 62.392 L 235.572 62.392 L 235.572 60.552 L 244.219 60.552 L 244.219 62.392 L 240.998 62.392 L 240.998 71.432 Z M 248.679 71.432 L 248.679 70.252 Q 248.249 70.883 247.547 71.246 Q 246.846 71.61 246.067 71.61 Q 245.272 71.61 244.642 71.261 Q 244.011 70.912 243.729 70.282 Q 243.447 69.651 243.447 68.537 L 243.447 63.55 L 245.532 63.55 L 245.532 67.172 Q 245.532 68.834 245.647 69.209 Q 245.762 69.584 246.067 69.803 Q 246.371 70.022 246.838 70.022 Q 247.373 70.022 247.796 69.729 Q 248.219 69.436 248.375 69.001 Q 248.531 68.567 248.531 66.875 L 248.531 63.55 L 250.616 63.55 L 250.616 71.432 Z M 251.685 71.432 L 251.685 60.552 L 253.77 60.552 L 253.77 64.47 Q 254.735 63.372 256.056 63.372 Q 257.496 63.372 258.439 64.415 Q 259.381 65.457 259.381 67.409 Q 259.381 69.428 258.42 70.519 Q 257.459 71.61 256.086 71.61 Q 255.411 71.61 254.754 71.272 Q 254.097 70.935 253.622 70.274 L 253.622 71.432 Z M 253.755 67.32 Q 253.755 68.545 254.141 69.131 Q 254.683 69.962 255.581 69.962 Q 256.271 69.962 256.758 69.372 Q 257.244 68.782 257.244 67.513 Q 257.244 66.162 256.754 65.565 Q 256.264 64.968 255.5 64.968 Q 254.75 64.968 254.253 65.55 Q 253.755 66.133 253.755 67.32 Z M 264.621 68.923 L 266.699 69.272 Q 266.298 70.415 265.434 71.013 Q 264.569 71.61 263.27 71.61 Q 261.214 71.61 260.227 70.267 Q 259.448 69.191 259.448 67.55 Q 259.448 65.591 260.472 64.481 Q 261.496 63.372 263.062 63.372 Q 264.821 63.372 265.838 64.533 Q 266.855 65.695 266.81 68.092 L 261.585 68.092 Q 261.608 69.02 262.09 69.536 Q 262.572 70.052 263.292 70.052 Q 263.782 70.052 264.116 69.784 Q 264.45 69.517 264.621 68.923 Z M 264.74 66.816 Q 264.717 65.91 264.272 65.439 Q 263.827 64.968 263.188 64.968 Q 262.506 64.968 262.06 65.465 Q 261.615 65.962 261.622 66.816 Z" transform="matrix(0.915771, 0, 0, 1.777663, 13.868996, -26.174692)" style="white-space: pre;"></path>
					</svg>
				</a>
				<div>
					<a class="navbar-settings-button navbar-brand" role="button" data-bs-toggle="modal" data-bs-target="#settingsModal" onclick="showSettings();">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-gear-fill" viewBox="0 0 16 16">
							<path d="M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z"></path>
						</svg>
					</a>
				</div>
			</div>
		</nav>
		<div id="theater-container" class="container-fluid p-0 mt-2 gutters" style="width: 100%; background: black;">
		
		</div>
		<div id="main-container" class="container-fluid p-0 mt-2 gutters">
			<div class="row gutters"> 
				<div id="video-comments-outer" class="col-12 col-lg-9">
					<div id="video-comments-inner">
						<div id="video-player-container" class="ratio ratio-16x9 d-flex align-items-center justify-content-center" style="background: black; color: white;">
							<div id="mtp-video-overlay" class="ratio ratio-16x9 hidden-elem" style="position: absolute; z-index: 9;width: 100%;" role="button">
								<div id="big-play-button-poster-container" class="ratio ratio-16x9">
									<button class="mtp-button mtp-large-play-button">
										<svg version="1.1" viewBox="0 0 68 48" width="100%" height="100%">
											<path d="M66.52,7.74c-0.78-2.93-2.49-5.41-5.42-6.19C55.79,.13,34,0,34,0S12.21,.13,6.9,1.55 C3.97,2.33,2.27,4.81,1.48,7.74C0.06,13.05,0,24,0,24s0.06,10.95,1.48,16.26c0.78,2.93,2.49,5.41,5.42,6.19 C12.21,47.87,34,48,34,48s21.79-0.13,27.1-1.55c2.93-0.78,4.64-3.26,5.42-6.19C67.94,34.95,68,24,68,24S67.94,13.05,66.52,7.74z" fill="#cb0c9f"></path>
											<path d="M 51.908 24 L 33.908 14 L 33.908 34" fill="#fff"></path>
											<path d="M 37.342 24.211 L 19.342 14.211 L 19.342 34.211" fill="#fff"></path>
										</svg>
									</button>
									<img id="video-poster" />
								</div>
							</div>
							<video id="video-player" class="video-js video-player" preload="auto" autoplay></video>
						</div>
						<div>
							<div id="video-title-section" class="row gutters mt-2">
								<div class="container"><h3 id="video-title" class="text-break">........</h3></div>
							</div>
							<div class="row gutters">
								<div id="stats-section" class="container">
									<div class="row align-items-center">
										<div class="col-xl-6 col-md-12">
											<a href="/"><img src="/assets/resources/images/icon.png" style="border-radius: 50%;width: 40px;height: 40px;"></a>
											<span id="node-name" class="text-break">........</span>
										</div>
										<div class="col-xl-6 col-md-12">
											<div class="float-end">
												<button type="button" id="video-like-button" class="btn btn-outline-primary me-1" onclick="likeVideo()">
													<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-up" viewBox="0 0 16 16">
														<path d="M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2.144 2.144 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a9.84 9.84 0 0 0-.443.05 9.365 9.365 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111L8.864.046zM11.5 14.721H8c-.51 0-.863-.069-1.14-.164-.281-.097-.506-.228-.776-.393l-.04-.024c-.555-.339-1.198-.731-2.49-.868-.333-.036-.554-.29-.554-.55V8.72c0-.254.226-.543.62-.65 1.095-.3 1.977-.996 2.614-1.708.635-.71 1.064-1.475 1.238-1.978.243-.7.407-1.768.482-2.85.025-.362.36-.594.667-.518l.262.066c.16.04.258.143.288.255a8.34 8.34 0 0 1-.145 4.725.5.5 0 0 0 .595.644l.003-.001.014-.003.058-.014a8.908 8.908 0 0 1 1.036-.157c.663-.06 1.457-.054 2.11.164.175.058.45.3.57.65.107.308.087.67-.266 1.022l-.353.353.353.354c.043.043.105.141.154.315.048.167.075.37.075.581 0 .212-.027.414-.075.582-.05.174-.111.272-.154.315l-.353.353.353.354c.047.047.109.177.005.488a2.224 2.224 0 0 1-.505.805l-.353.353.353.354c.006.005.041.05.041.17a.866.866 0 0 1-.121.416c-.165.288-.503.56-1.066.56z"/>
													</svg>
													<span id="video-like-count"></span>
												</button>
												<button type="button" id="video-dislike-button" class="btn btn-outline-primary me-1" onclick="dislikeVideo()">
													<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-down" viewBox="0 0 16 16">
														<path d="M8.864 15.674c-.956.24-1.843-.484-1.908-1.42-.072-1.05-.23-2.015-.428-2.59-.125-.36-.479-1.012-1.04-1.638-.557-.624-1.282-1.179-2.131-1.41C2.685 8.432 2 7.85 2 7V3c0-.845.682-1.464 1.448-1.546 1.07-.113 1.564-.415 2.068-.723l.048-.029c.272-.166.578-.349.97-.484C6.931.08 7.395 0 8 0h3.5c.937 0 1.599.478 1.934 1.064.164.287.254.607.254.913 0 .152-.023.312-.077.464.201.262.38.577.488.9.11.33.172.762.004 1.15.069.13.12.268.159.403.077.27.113.567.113.856 0 .289-.036.586-.113.856-.035.12-.08.244-.138.363.394.571.418 1.2.234 1.733-.206.592-.682 1.1-1.2 1.272-.847.283-1.803.276-2.516.211a9.877 9.877 0 0 1-.443-.05 9.364 9.364 0 0 1-.062 4.51c-.138.508-.55.848-1.012.964l-.261.065zM11.5 1H8c-.51 0-.863.068-1.14.163-.281.097-.506.229-.776.393l-.04.025c-.555.338-1.198.73-2.49.868-.333.035-.554.29-.554.55V7c0 .255.226.543.62.65 1.095.3 1.977.997 2.614 1.709.635.71 1.064 1.475 1.238 1.977.243.7.407 1.768.482 2.85.025.362.36.595.667.518l.262-.065c.16-.04.258-.144.288-.255a8.34 8.34 0 0 0-.145-4.726.5.5 0 0 1 .595-.643h.003l.014.004.058.013a8.912 8.912 0 0 0 1.036.157c.663.06 1.457.054 2.11-.163.175-.059.45-.301.57-.651.107-.308.087-.67-.266-1.021L12.793 7l.353-.354c.043-.042.105-.14.154-.315.048-.167.075-.37.075-.581 0-.211-.027-.414-.075-.581-.05-.174-.111-.273-.154-.315l-.353-.354.353-.354c.047-.047.109-.176.005-.488a2.224 2.224 0 0 0-.505-.804l-.353-.354.353-.354c.006-.005.041-.05.041-.17a.866.866 0 0 0-.121-.415C12.4 1.272 12.063 1 11.5 1z"/>
													</svg>
													<span id="video-dislike-count"></span>
												</button>
												<button type="button" class="btn btn-outline-primary me-1" onclick="downloadVideo()">
													<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
														<path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"/>
														<path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"/>
													</svg>
												</button>
												<button type="button" class="btn btn-outline-primary me-1" onclick="shareVideo()">
													<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-share" viewBox="0 0 16 16">
														<path d="M13.5 1a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zM11 2.5a2.5 2.5 0 1 1 .603 1.628l-6.718 3.12a2.499 2.499 0 0 1 0 1.504l6.718 3.12a2.5 2.5 0 1 1-.488.876l-6.718-3.12a2.5 2.5 0 1 1 0-3.256l6.718-3.12A2.5 2.5 0 0 1 11 2.5zm-8.5 4a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm11 5.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3z"/>
													</svg>
												</button>
												<button type="button" class="btn btn-outline-primary" data-bs-toggle="dropdown" aria-expanded="false" id="overflow-dropdown-button">
													<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
														<path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0zm0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/>
													</svg>
												</button>
												<ul class="dropdown-menu" aria-labelledby="overflow-dropdown-button">
													<li>
														<a class="dropdown-item" role="button" onclick="reportVideo()">Report</a>
													</li>
												</ul>
											</div>
										</div>
									</div>
								</div>
							</div>
							<div id="video-information-section" class="row align-items-center m-0">
								<div id="video-information-container" class="col-12 mt-2 mb-2" style="background: #cb0c9f12; border-radius: 10px; padding-top: 0.5rem; padding-bottom: 0.5rem;">
									<div id="video-information-views-date">
										<span id="video-information-views" class="fw-bold">........</span>&nbsp;&nbsp;<span id="video-information-date" class="fw-bold">........</span>
									</div>
									<div id="video-information-description" class="text-break">........</div>
								</div>
							</div>
							
							
							<div id="expand-comment-section" class="hand pt-2" onclick="openCommentSection();">
								<hr>
								<div>
									<span id="expand-comment-section-descriptor">Comments</span> &#x2022; <span id="expand-comment-section-counter">...</span>
									<div style="float: right;">
										<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24">
											<path d="M12,21.7l-6.4-6.4l0.7-0.7l5.6,5.6l5.6-5.6l0.7,0.7L12,21.7z M18.4,8.6L12,2.3L5.6,8.6l0.7,0.7L12,3.7l5.6,5.6L18.4,8.6z"></path>
										</svg>
									</div>
								</div>
								<hr>
							</div>
							<div id="comment-section" class="pt-3">
								<div id="comment-section-back-button-container" class="float-end hidden-elem"><button class="btn btn-icon btn-2 btn-outline-primary" type="button" onclick="closeCommentSection();">
								<span class="btn-inner--icon">
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M15 8a.5.5 0 0 0-.5-.5H2.707l3.147-3.146a.5.5 0 1 0-.708-.708l-4 4a.5.5 0 0 0 0 .708l4 4a.5.5 0 0 0 .708-.708L2.707 8.5H14.5A.5.5 0 0 0 15 8z"/></svg>
								</span>
								</button>
								
								</div>
								<div id="comment-section-counter-container" class="mb-3"><span id="comment-section-counter">...</span> <span id="comment-section-counter-descriptor">Comments</span>  
									<span>
										<button id="update-comments-button" type="button" class="btn btn-outline-primary me-1" onclick="updateComments()">
											<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/><path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/></svg>
										</button>
										<button id="update-comments-button-spinner" type="button" class="btn btn-outline-primary me-1 hidden-elem">
											<div id="update-comments-spinner" class="spinner-border text-primary" role="status"></div>
										</button>
									</span>
									<span id="comment-section-update-descriptor"></span>
								</div>
								<form id="comment-input-form-static" class="comment-input-form" role="form" method="POST" data-captchatype="static">
									<textarea class="w-100 border-top-0 border-end-0 border-start-0 comment-input-text-area" rows=1 placeholder="Add a comment..." maxlength=500 name="commentPlainText"></textarea>
									<div class="text-end mt-1">
										<div id="comment-input-form-static-captcha-container">
											<button class="btn btn-outline-primary comment-input-form-get-captcha-button" type="button" onclick="showCommentInputFormCaptcha(this)" data-captchatype="static">get captcha</button>
										</div>
										<div id="comment-input-form-static-submit-container" class="hidden-elem">
											<div id="comment-input-form-static-captcha" class="captcha-container mb-1"></div>
											<button class="btn btn-outline-primary" type="button" data-captchatype="static" onclick="$('#comment-input-form-static-submit-container').addClass('hidden-elem');$('#comment-input-form-static-captcha-container').removeClass('hidden-elem');$('#comment-input-form-static-error-message').empty()">cancel</button>
											<input type="text" maxlength="6" size="4" placeholder="captcha" name="captchaResponse" />
											<button class="btn btn-outline-primary" type="submit">submit</button>
											<div id="comment-input-form-static-error-message"></div>
										</div>
									</div>
								</form>
								<div id="comments-container" class="mt-2">

								</div>
							</div>
						</div>
					</div>
				</div>
				<div id="recommended-videos-list-container" class="col-12 col-lg-3">
					<div id="live-stream-chat-container" class="card mb-2 hidden-elem" style="height: 50vh;">
						<div class="row g-0" style="height: 100%;">
							<div class="col-12 d-flex flex-column" style="height: 100%;">
								<div id="chat-messages-container" class="position-relative flex-grow-1 overflow-auto p-1">
									<div id="chat-messages" class="chat-messages p-1" style="overflow-y: auto;">
									
									</div>
								</div>
								
								<div id="chat-input-container" class="py-1 px-1 border-top">
									<div class="">
										<input id="send-chat-message-input" type="text" class="form-control" placeholder="...connecting..." maxlength=500 disabled>
										<button id="send-chat-message-button" class="btn btn-outline-primary w-100 mt-1" disabled>Send</button>
									</div>
								</div>
								
							</div>
						</div>
					</div>
					<div id="recommended-videos-tag-slider" class="keen-slider pb-1">
						<div class="keen-slider__slide number-slide1">
							<button type="button" class="btn btn-outline-primary recommendation-category-button recommendation-category-button-selected" data-tagterm="" style="white-space: nowrap;">all</button>
						</div>
					</div>
					<ul id="recommended-videos-list" class="list-group">

					</ul>
				</div>
			</div>
		</div>
		
		<div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
		  <div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
			  <div class="modal-header">
				<h5 class="modal-title" id="settingsModalLabel">Settings</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			  </div>
			  <div class="modal-body">
				<div class="form-check form-switch">
				  <input class="form-check-input" type="checkbox" role="switch" id="darkModeSwitch">
				  <label class="form-check-label" for="darkModeSwitch">dark mode</label>
				</div>
			  </div>
			</div>
		  </div>
		</div>

		<script src="/assets/resources/javascript/videojs-8.3.0.min.js"></script>
		<script src="/assets/resources/javascript/sweetalert-11.0.11.min.js"></script>
		<script src="/assets/resources/javascript/keen-slider-6.8.5.min.js"></script>
		
		<script>
            const INCOMING_PARAMETERS = [[= JSON.stringify(model) ]];

			var VIDEO_ID;
			var HASH_VALUE = '';
			
			var NODE_ID;
			var NODE_PROTOCOL;
			var NODE_ADDRESS;
			var NODE_PORT;
			var NODE_BASE_URL;
			
			const COMMENT_ELEMENT_CACHE = {};
			const COMMENT_REPLIES_CACHE = {};

            const RECOMMENDED_VIDEOS_TAGS_CACHE = {'':[]};
			
			var DOWNLOADABLE_SOURCES = [];
			
			var MOST_RECENT_VISIBLE_COMMENT_TIMESTAMP = 0;

			var CURRENT_VIDEO_RESOLUTION;
			var CURRENT_VIDEO_FORMAT;

			var TIMESTAMP_UPDATE_TRACKER = [];

            const COMMENT_INPUT_FORM_DYNAMIC = $('\
			<form id="comment-input-form-dynamic" class="comment-input-form" role="form" method="POST" data-captchatype="dynamic" style="background: #cb0c9f12;padding: 5px 5px 5px 5px;">\
				<textarea class="w-100 border-top-0 border-end-0 border-start-0 comment-input-text-area" rows="1" placeholder="Add a comment..." maxlength="500" name="commentPlainText" style="height:28px;overflow-y:hidden;resize:none;"></textarea>\
				<div class="text-end mt-1">\
					<div id="comment-input-form-dynamic-captcha-container">\
						<button class="btn btn-outline-primary" type="button" data-captchatype="dynamic" onclick="$(\'#comment-input-form-dynamic\').remove();">cancel</button>\
						<button class="btn btn-outline-primary comment-input-form-get-captcha-button" type="button" onclick="showCommentInputFormCaptcha(this)" data-captchatype="dynamic">get captcha</button>\
					</div>\
					<div id="comment-input-form-dynamic-submit-container" class="hidden-elem">\
						<div id="comment-input-form-dynamic-captcha" class="captcha-container mb-1"></div>\
						<button id="comment-input-form-dynamic-cancel-button-inner" class="btn btn-outline-primary" type="button" data-captchatype="dynamic" onclick="$(\'#comment-input-form-dynamic\').remove();$(this).parent().parent().find(\'#comment-input-form-dynamic-submit-container\').addClass(\'hidden-elem\');$(this).parent().parent().find(\'#comment-input-form-dynamic-captcha-container\').removeClass(\'hidden-elem\');$(this).parent().parent().find(\'#comment-input-form-dynamic-error-message\').empty();">cancel</button>\
						<input type="text" maxlength="6" size="4" placeholder="captcha" name="captchaResponse">\
						<button class="btn btn-outline-primary" type="submit">submit</button>\
						<div id="comment-input-form-dynamic-error-message"></div>\
					</div>\
				</div>\
			</form>');
			
			$(document).ready(function() {
				const params = new URL(window.location.href).searchParams;
				
				VIDEO_ID = params.get('v');
				
				if(VIDEO_ID != null) {
					HASH_VALUE = window.location.hash;
					
					$('#video-poster').attr('src', '/assets/videos/' + VIDEO_ID + '/poster');

                    loadInformation(INCOMING_PARAMETERS.informationData.information);
				    loadVideo(INCOMING_PARAMETERS.videoData.video);
                    loadTags(INCOMING_PARAMETERS.recommendedVideosData.recommendedVideos);
                    loadRecommendedVideos(INCOMING_PARAMETERS.recommendedVideosData.recommendedVideos, true);
                    loadComments(INCOMING_PARAMETERS.commentsData.comments, 'after', false);

                    if(HASH_VALUE !== '') {
                        if($(HASH_VALUE + ' .postNum a:first-child').length) {
                            $(HASH_VALUE + ' .postNum a:first-child')[0].click();
                        }
                    }
                    
					setLikedOrDisliked();
					refreshTextAreas();
				}
			});

            function loadInformation(information) {
                const nodeId = information.nodeId;
                const publicNodeProtocol = information.publicNodeProtocol;
                const publicNodeAddress = information.publicNodeAddress;
                const publicNodePort = information.publicNodePort;
                
                NODE_ID = nodeId;
                
                NODE_PROTOCOL = publicNodeProtocol;
                NODE_ADDRESS = publicNodeAddress;
                NODE_PORT = publicNodePort;
                
                NODE_BASE_URL = NODE_PROTOCOL + '://' + NODE_ADDRESS + ':' + NODE_PORT;
            }

            function loadTags(recommendedVideos) {
                const tags = [];

                recommendedVideos.forEach(function(recommendedVideo) {
                    const tagsArray = recommendedVideo.tags.split(',');
                    
                    tagsArray.forEach(function(tag) {
                        if (!tags.includes(tag)) {
                            tags.push(tag);
                        }
                    });
                });

                tags.forEach(function(tag) {
                    $('#recommended-videos-tag-slider').append('<div class="keen-slider__slide number-slide2"><button type="button" class="btn btn-outline-primary recommendation-category-button" data-tagterm="' + tag + '" style="white-space: nowrap;">' + tag + '</button></div>');
                });
                
                const recommendationsSlider = new KeenSlider("#recommended-videos-tag-slider", {
                    loop: false,
                    mode: "free",
                    rtl: false,
                    slides: { 
                        perView: "auto",
                        spacing: 5 
                    },
                });
                
                var recommendationCategoryButtonOffsetLeft;
                $(".recommendation-category-button").on("mouseup", function(e) {
                    const movementDifference = Math.abs(recommendationCategoryButtonOffsetLeft - $(this).offset().left);
                    
                    if(movementDifference < 10) {
                        $('.recommendation-category-button').removeClass('recommendation-category-button-selected');
                        $(this).addClass('recommendation-category-button-selected');
                    }
                });
                
                $(".recommendation-category-button").on("mousedown", function(e) {
                    recommendationCategoryButtonOffsetLeft = $(this).offset().left;
                });
                
                $(".recommendation-category-button").on("click", function(e) {
                    //e.preventDefault();
                
                    const tagTerm = $(this).data('tagterm').toString();
                    
                    $('#recommended-videos-list').empty();

                    loadRecommendedVideos(RECOMMENDED_VIDEOS_TAGS_CACHE[tagTerm], false);
                });
            }

            function loadRecommendedVideos(recommendedVideos, updateCache) {
				clearTimestampUpdateTracker();

                recommendedVideos.forEach(function(recommendedVideo) {
                    if(updateCache) {
                        const tagsArray = recommendedVideo.tags.split(',');
                        
                        tagsArray.forEach(function(tag) {
                            if(!RECOMMENDED_VIDEOS_TAGS_CACHE.hasOwnProperty(tag)) {
                                RECOMMENDED_VIDEOS_TAGS_CACHE[tag] = [recommendedVideo];
                            }
                            else {
                                RECOMMENDED_VIDEOS_TAGS_CACHE[tag].push(recommendedVideo);
                            }

							if (!RECOMMENDED_VIDEOS_TAGS_CACHE[''].includes(recommendedVideo)) {
								RECOMMENDED_VIDEOS_TAGS_CACHE[''].push(recommendedVideo);
							}
                        });
                    }

                    loadRecommendedVideo(recommendedVideo);
                });
            }

            function loadRecommendedVideo(recommendedVideo) {
                const videoId = recommendedVideo.video_id;
                const title = recommendedVideo.title;
                const views = (videoId === VIDEO_ID ? recommendedVideo.views + 1 : recommendedVideo.views);
                const isLive = recommendedVideo.is_live;
                const isStreaming = recommendedVideo.is_streaming;
                const lengthSeconds = recommendedVideo.length_seconds;
                const creationTimestamp = recommendedVideo.creation_timestamp;
                
				const durationFormatted = convertSecondsToDurationFormatted(lengthSeconds);
                const viewsFormatted = getViewsFormatted(views);
                
                var liveStreamInidcator = '';
                
                if(isLive) {
                    if(isStreaming) {
                        liveStreamInidcator = '<i style="position: absolute; left: 5px; bottom: 5px; background-color: #cb0c9f; color: white; border-radius: 4px; padding: 3px; font-size: 10px; font-weight: 500;"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-broadcast" viewBox="0 0 16 16"><path d="M3.05 3.05a7 7 0 0 0 0 9.9.5.5 0 0 1-.707.707 8 8 0 0 1 0-11.314.5.5 0 0 1 .707.707zm2.122 2.122a4 4 0 0 0 0 5.656.5.5 0 1 1-.708.708 5 5 0 0 1 0-7.072.5.5 0 0 1 .708.708zm5.656-.708a.5.5 0 0 1 .708 0 5 5 0 0 1 0 7.072.5.5 0 1 1-.708-.708 4 4 0 0 0 0-5.656.5.5 0 0 1 0-.708zm2.122-2.12a.5.5 0 0 1 .707 0 8 8 0 0 1 0 11.313.5.5 0 0 1-.707-.707 7 7 0 0 0 0-9.9.5.5 0 0 1 0-.707zM10 8a2 2 0 1 1-4 0 2 2 0 0 1 4 0z"/></svg>&nbspLIVE</i>';
                    }
                    else {
                        liveStreamInidcator = '<i style="position: absolute; left: 5px; bottom: 5px; background-color: #cb0c9f; color: white; border-radius: 4px; padding: 3px; font-size: 10px; font-weight: 500;">STREAMED</i>';
                    }
                }

                const element = $('\
                    <li class="list-group-item ps-0 pe-0 mt-2 video-recommendation-card border-0">\
                        <a href="/watch?v=' + videoId + '" class="text-decoration-none">\
                            <div class="card video-recommendation-card border-0">\
                                <div class="row g-0 position-relative">\
                                    <div class="col-6 position-relative">\
                                        <div class="position-relative">\
                                            <img src="/assets/videos/' + videoId + '/preview" class="rounded ratio ratio-16x9" alt="..."/>\
                                            <i class="video-streaming-timestamp">' + durationFormatted + '</i>\
                                            ' + liveStreamInidcator + '\
                                        </div>\
                                    </div>\
                                    <div class="col-6">\
                                        <div class="h-100 ms-1">\
                                            <span class="video-recommendation-card-text" style="overflow: hidden;text-overflow: ellipsis;white-space: normal;-webkit-line-clamp: 2;display: -webkit-box;-webkit-box-orient: vertical;font-weight: 500;font-family: &quot;Roboto&quot;,&quot;Arial&quot;,sans-serif;">' + title + '</span>\
                                            <small class="video-recommendation-card-text">' + viewsFormatted + ' &#x2022 <span class="video-info-timestamp"></span></small>\
                                        </div>\
                                    </div>\
                                </div>\
                            </div>\
                        </a>\
                    </li>\
                ');
                
                $('#recommended-videos-list').append(element);

				applyTimestampUpdateTrackerToVideo(element, lengthSeconds, creationTimestamp, isStreaming);
            }

			function applyTimestampUpdateTrackerToVideo(element, lengthSeconds, creationTimestamp, isStreaming) {
				function updateCreationTimestamp() {
					const creationTimestampFormatted = getCreationTimestampFormatted(creationTimestamp);

					$(element).find('.video-info-timestamp').text(creationTimestampFormatted);

					if(isStreaming) {
						const durationFormatted = convertSecondsToDurationFormatted(lengthSeconds);

						$(element).find('.video-streaming-timestamp').text(durationFormatted);
					}
				}

				updateCreationTimestamp();

				const interval = setInterval(function() {
					lengthSeconds++;

					updateCreationTimestamp();
				}, 1000);
			}

			function clearTimestampUpdateTracker() {
				TIMESTAMP_UPDATE_TRACKER.forEach(function(interval) {
					clearInterval(interval);
				});
			}
			
			function setLikedOrDisliked() {
				if(typeof(Storage) != null) {
					const value = localStorage.getItem(VIDEO_ID + '-like-dislike');
					
					if(value === 'like') {
						$('#video-like-button').addClass('btn-primary').removeClass('btn-outline-primary');
					}
					else if(value === 'dislike') {
						$('#video-dislike-button').addClass('btn-primary').removeClass('btn-outline-primary');
					}
				}
			}
			
			function setClipboard(value) {
				try {
					navigator.clipboard.writeText(value)
					.then(function() {
						// text copied to clipboard success
					})
					.catch(function(error) {
						// text copied to clipboard fail, so using native DOM API fallback
						
						fallback(value);
					});
				}
				catch(error) {
					// text copied to clipboard fail, so using native DOM API fallback
					
					fallback(value);
				}
				
				function fallback() {
					var tempInput = document.createElement("input");
					tempInput.style = "position: absolute; left: -1000px; top: -1000px";
					tempInput.value = value;
					document.body.appendChild(tempInput);
					tempInput.select();
					document.execCommand("copy");
					document.body.removeChild(tempInput);
				}
			}
			
			function refreshClickTooltips() {
				$(function () {
					$('.click-tooltip[data-bs-toggle="tooltip"]').tooltip({
						trigger: 'click'
					});
					
					$('.click-tooltip[data-bs-toggle="tooltip"]').on('click', function () {
						setTimeout(() => {
							$(this).tooltip('hide');
						}, 500);
					});
				});
			}
			
			function refreshTextAreas() {
				$("textarea").each(function () {
					this.setAttribute("style", "height:" + (this.scrollHeight) + "px;overflow-y:hidden;resize:none;");
				}).on("input", function () {
					this.style.height = 0;
					this.style.height = (this.scrollHeight) + "px";
				});
			}
			
			function loadVideo(video) {
				const nodeName = video.nodeName;
				
				const title = video.title;
				const description = video.description;
				const likes = video.likes;
				const dislikes = video.dislikes;
				const comments = video.comments;
				const isPublished = video.isPublished;
				const isPublishing = video.isPublishing;
				const isLive = video.isLive;
				const isStreaming = video.isStreaming;
				const isStreamed = video.isStreamed;
				const creationTimestamp = video.creationTimestamp;
				
				const adaptiveSources = video.adaptiveSources;
				const progressiveSources = video.progressiveSources;
				const sourcesFormatsAndResolutions = video.sourcesFormatsAndResolutions;

				DOWNLOADABLE_SOURCES = progressiveSources;
				
				if(isStreaming) {
					connectWebsocket();
				}
				
				document.title = title + ' - MoarTube';
				
				$('#node-name').text(nodeName);
				
				$('#video-like-count').text(likes);
				$('#video-dislike-count').text(dislikes);
				
				$('#video-title').text(title);
				
				incrementViews()
				.then(function(views) {
					if(!isStreaming) {
						const viewsFormatted = getViewsFormatted(views);

						$('#video-information-views').text(viewsFormatted);
					}
				})
				.catch(function(error) {
					console.log(error);
				});

				(function updateCreationTimestamp() {
					const creationTimestampFormatted = getCreationTimestampFormatted(creationTimestamp);

					if(isLive) {
						if(isStreaming) {
							$('#video-information-date').text('Started streaming ' + creationTimestampFormatted);
						}
						else {
							$('#video-information-date').text('Streamed live ' + creationTimestampFormatted);
						}
					}
					else {
						$('#video-information-date').text(creationTimestampFormatted);
					}

					setTimeout(updateCreationTimestamp, 1000);
				})();
				
				$('#video-information-description').text(description);
				
				$('#comment-section-counter').text(comments);
				$('#expand-comment-section-counter').text(comments);
				
				if(comments === 1) {
					$('#comment-section-counter-descriptor').text('Comment');
					$('#expand-comment-section-counter-descriptor').html('Comment');
				}
				else {
					$('#comment-section-counter-descriptor').text('Comments');
					$('#expand-comment-section-counter-descriptor').html('Comments');
				}

				if(adaptiveSources.length > 0 || progressiveSources.length > 0) {
					initializeVideoJsPlayer();
				}
				else {
					var message = '';
					
					if(isPublishing) {
						message = 'this video is currently publishing, please check back later';
					}
					else if(isStreamed) {
						message = 'this live stream has ended and has not been published yet';
					}
					else {
						message = 'this video is unavailable';
					}
					
					$('#video-player-container').append('<div class="d-flex align-items-center justify-content-center">' + message + '</div>');
				}

				function incrementViews() {
					return new Promise(function(resolve, reject) {
						$.ajax({type: 'GET', url: '/videos/' + VIDEO_ID + '/views/increment'})
						.done(function (data) {
							if(data.isError) {
								reject(data.message);
							}
							else {
								const views = data.views;

								resolve(views);
							}
						})
						.fail(function() {
							reject('unable to communicate with node');
						});
					});
				}
				
				function initializeVideoJsPlayer() {
					window.videojs.log.level("off");
					
					$("#video-player").attr("controls", true);

					const sources = adaptiveSources.concat(progressiveSources);

					var player = videojs('video-player', {
						sources: sources,
						html5: {
							vhs: {
								overrideNative: !videojs.browser.IS_SAFARI,
								autoStartLoad: true,
								maxBufferLength: 30, // maxBufferLengthMin
								maxMaxBufferLength: 60, // maxBufferLengthMax
								lowLatencyMode: true,
								liveSyncDurationCount: 5,
								levelLoadingMaxRetry: 4,
								capLevelToPlayerSize: true
							},
							nativeAudioTracks: false,
							nativeVideoTracks: false
						},
						liveui: true, 
						errorDisplay: false, 
						liveTracker: { 
							trackingThreshold: 0 
						}, 
						preload: "auto", 
						disablePictureInPicture: true, 
						controlBar: { 
							pictureInPictureToggle: false 
						}
					});

					/*
					// supposedly iOS does not support headers
					videojs.Vhs.xhr.beforeRequest = (options) => {
						options.headers = options.headers || {};

						options.headers['is-live-manifest'] = 'true-or-false';
						
						return options;
					};
					*/

					configurePlayerButtons();
					configurePlayerEvents();

					function configurePlayerButtons() {
						const handleTechClickDefaultFunction = player.player_.handleTechClick_;

						const MATERIAL_NAVIGATE_NEXT_SVG = '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M504-480 320-664l56-56 240 240-240 240-56-56 184-184Z" fill="#fff"/></svg>';
						const MATERIAL_NAVIGATE_BEFORE_SVG = '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M560-240 320-480l240-240 56 56-184 184 184 184-56 56Z" fill="#fff"/></svg>';
						const MATERIAL_DONE_SVG = '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24"><path d="M382-240 154-468l57-57 171 171 367-367 57 57-424 424Z" fill="#fff"/></svg>';
						
						if(isLive && isStreaming) {
							// streamer mode
							var isShowingStreamerMode = false;
							const streamerModeButton = player.getChild('ControlBar').addChild('button', {
								clickHandler: function(event) {
									event[0].stopPropagation();
									
									if(isShowingStreamerMode) {
										isShowingStreamerMode = false;
										
										streamerModeButton.el().innerHTML = '<svg width="20" height="20" fill="#fff" class="bi bi-aspect-ratio" viewBox="0 0 16 16"><path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5zM1.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5z"/><path d="M2 4.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1H3v2.5a.5.5 0 0 1-1 0zm12 7a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H13V8.5a.5.5 0 0 1 1 0z"/></svg>';
										
										$('#main-container').removeClass('w-100');
									}
									else {
										isShowingStreamerMode = true;
										
										streamerModeButton.el().innerHTML = '<svg width="20" height="20" fill="#fff" class="bi bi-aspect-ratio" viewBox="0 0 16 16"><path d="M0 12.5v-9A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5M2.5 4a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 1 0V5h2.5a.5.5 0 0 0 0-1zm11 8a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-1 0V11h-2.5a.5.5 0 0 0 0 1z"/></svg>';
										
										$('#main-container').addClass('w-100');
									}
								}
							});
							streamerModeButton.el().classList.add('video-js-streamer-button');
							streamerModeButton.el().innerHTML = '<svg width="20" height="20" fill="#fff" class="bi bi-aspect-ratio" viewBox="0 0 16 16"><path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5zM1.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5z"/><path d="M2 4.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1H3v2.5a.5.5 0 0 1-1 0zm12 7a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H13V8.5a.5.5 0 0 1 1 0z"/></svg>';
							streamerModeButton.el().style.cursor = "pointer";
						}
						
						// theater button
						var isShowingTheaterMode = false;
						const theaterModeButton = player.getChild('ControlBar').addChild('button', {
							clickHandler: function(event) {
								event[0].stopPropagation();
								
								if(isShowingTheaterMode) {
									isShowingTheaterMode = false;
									
									theaterModeButton.el().innerHTML = '<svg height="100%" version="1.1" viewBox="0 0 36 36" width="100%"><path d="m 28,11 0,14 -20,0 0,-14 z m -18,2 16,0 0,10 -16,0 0,-10 z" fill="#fff" fill-rule="evenodd"></path></svg>';
									
									$('#video-player-container').addClass('ratio').removeClass('position-relative');
									$('#video-player').removeClass('video-player-theater-mode').removeClass('vjs-fluid');
									$("#video-player-container").prependTo("#video-comments-inner");
								}
								else {
									isShowingTheaterMode = true;
									
									theaterModeButton.el().innerHTML = '<svg height="100%" version="1.1" viewBox="0 0 36 36" width="100%"><path d="m 26,13 0,10 -16,0 0,-10 z m -14,2 12,0 0,6 -12,0 0,-6 z" fill="#fff" fill-rule="evenodd"></path></svg>';
									
									$('#video-player-container').removeClass('ratio').addClass('position-relative');
									$('#video-player').addClass('video-player-theater-mode').addClass('vjs-fluid');
									$("#video-player-container").appendTo("#theater-container");
								}
							}
						});
						theaterModeButton.el().classList.add('video-js-theater-button');
						theaterModeButton.el().innerHTML = '<svg height="100%" version="1.1" viewBox="0 0 36 36" width="100%"><path d="m 28,11 0,14 -20,0 0,-14 z m -18,2 16,0 0,10 -16,0 0,-10 z" fill="#fff" fill-rule="evenodd"></path></svg>';
						theaterModeButton.el().style.cursor = "pointer";
						
						// overflow button
						const overflowButton = player.getChild('ControlBar').addChild('button', {
							clickHandler: function(event) {
								event[0].stopPropagation();
								
								if($('#video-player .vjs-control-bar .video-js-overflow-menu').length === 0) {
									player.player_.handleTechClick_ = function(event) {}
									
									$('body').on('click', function(event) {
										$('body').off('click');
										
										$('.video-player .vjs-control-bar .video-js-overflow-menu').remove();
										
										player.player_.handleTechClick_ = handleTechClickDefaultFunction;
									});
									
									showVideoJsOverflowMenuHtml(player);
								}
								else {
									removeOverflowMenuHtml();
									
									player.player_.handleTechClick_ = handleTechClickDefaultFunction;
								}
							}
						});
						overflowButton.el().innerHTML = '<svg height="24" viewBox="0 -960 960 960" width="100%"><path d="M480-160q-33 0-56.5-23.5T400-240q0-33 23.5-56.5T480-320q33 0 56.5 23.5T560-240q0 33-23.5 56.5T480-160Zm0-240q-33 0-56.5-23.5T400-480q0-33 23.5-56.5T480-560q33 0 56.5 23.5T560-480q0 33-23.5 56.5T480-400Zm0-240q-33 0-56.5-23.5T400-720q0-33 23.5-56.5T480-800q33 0 56.5 23.5T560-720q0 33-23.5 56.5T480-640Z" fill="#fff"/></svg>';
						overflowButton.el().style.order = "10";
						overflowButton.el().style.cursor = "pointer";
						
						function showVideoJsOverflowMenuHtml(player) {
							const currentPlaybackRate = player.playbackRate();

							player.on(["playing"], function(e) {
								// can only set a playback rate when the player is actually playing; setting before "playing" has no effect
								player.playbackRate(currentPlaybackRate);
							});

							if(CURRENT_VIDEO_RESOLUTION == null && CURRENT_VIDEO_FORMAT == null) {
								const currentSource = player.currentSrc();
								const segments = currentSource.split('/');
								
								CURRENT_VIDEO_RESOLUTION = segments[segments.length - 1];
								CURRENT_VIDEO_FORMAT = segments[segments.length - 2];
								
								if(CURRENT_VIDEO_FORMAT !== 'mp4' && CURRENT_VIDEO_FORMAT !== 'webm' && CURRENT_VIDEO_FORMAT !== 'ogv') {
									CURRENT_VIDEO_FORMAT = 'm3u8';
									CURRENT_VIDEO_RESOLUTION = 'auto';
								}
							}

							showOverflowMenuMain();

							function showOverflowMenuMain() {
								const html = '\
								<div class="video-js-overflow-menu">\
									<button type="button" class="video-js-overflow-format-button"><label class="video-js-overflow-button-label"><span>Quality</span><span class="video-js-current-selection-span">' + CURRENT_VIDEO_FORMAT + ' ' + CURRENT_VIDEO_RESOLUTION + MATERIAL_NAVIGATE_NEXT_SVG + '</span></label></button>\
									<button type="button" class="video-js-overflow-playback-speed-button"><label class="video-js-overflow-button-label"><span>Playback speed</span><span class="video-js-current-selection-span">' + currentPlaybackRate + 'x' + MATERIAL_NAVIGATE_NEXT_SVG + '</span></label></button>\
								</div>';
								
								if($("#video-player .vjs-control-bar .video-js-overflow-menu").length) {
									$("#video-player .vjs-control-bar .video-js-overflow-menu").replaceWith(html);
								}
								else {
									$("#video-player .vjs-control-bar").append(html);
								}
								
								$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-format-button').click(function(event) {
									event.stopPropagation();

									showOverflowMenuFormats();
								});

								$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-playback-speed-button').click(function(event) {
									event.stopPropagation();

									showPlayRateMenu();
								});
							}

							function showOverflowMenuFormats() {
								// find the (available) formats that actually have sources; not empty array
								const availableFormats = Object.keys(sourcesFormatsAndResolutions).filter(key => Array.isArray(sourcesFormatsAndResolutions[key]) && sourcesFormatsAndResolutions[key].length > 0);

								var html = '<div class="video-js-overflow-menu">\
								<button type="button" class="video-js-back-to-overflow-main-button"><span>Format</span>' + MATERIAL_NAVIGATE_BEFORE_SVG + '</button>';

								availableFormats.forEach(function(availableFormat) {
									if(CURRENT_VIDEO_FORMAT === availableFormat) {
										html += '<button type="button" class="video-js-overflow-format-explicit-button video-js-overflow-explicit-selected-button" data-format="' + availableFormat + '"><span class="video-js-chosen-item">' + MATERIAL_DONE_SVG + '</span><span>' + availableFormat + '</span></button>';
									}
									else {
										html += '<button type="button" class="video-js-overflow-format-explicit-button" data-format="' + availableFormat + '"><span class="video-js-chosen-item hidden-elem">' + MATERIAL_DONE_SVG + '</span><span>' + availableFormat + '</span></button>';
									}
								});

								html += '</div>';

								$("#video-player .vjs-control-bar .video-js-overflow-menu").replaceWith(html);
								
								$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-format-explicit-button').click(function(event) {
									event.stopPropagation();

									const selectedVideoFormat = $(this).data('format');

									showOverflowMenuResolutions(selectedVideoFormat);
								});

								// back from formats menu to main menu
								$('.video-js-back-to-overflow-main-button').click(function(event) {
									event.stopPropagation();
									
									showOverflowMenuMain();
								});
							}

							function showOverflowMenuResolutions(selectedVideoFormat) {
								const resolutions = sourcesFormatsAndResolutions[selectedVideoFormat];

								var html = '<div class="video-js-overflow-menu">\
								<button type="button" class="video-js-back-to-overflow-formats-button"><span>Resolution</span>' + MATERIAL_NAVIGATE_BEFORE_SVG + '</button>';
								
								resolutions.forEach(function(resolution) {
									if(selectedVideoFormat === CURRENT_VIDEO_FORMAT && CURRENT_VIDEO_RESOLUTION === resolution) {
										html += '<button type="button" class="video-js-overflow-format-resolution-explicit-button video-js-overflow-explicit-selected-button" data-resolution="' + resolution + '"><span class="video-js-chosen-item">' + MATERIAL_DONE_SVG + '</span><span>' + resolution + '</span></button>';
									}
									else {
										html += '<button type="button" class="video-js-overflow-format-resolution-explicit-button" data-resolution="' + resolution + '"><span class="video-js-chosen-item hidden-elem">' + MATERIAL_DONE_SVG + '</span><span>' + resolution + '</span></button>';
									}
								});

								if(selectedVideoFormat === 'm3u8') {
									if(CURRENT_VIDEO_RESOLUTION === 'auto') {
										html += '<button type="button" class="video-js-overflow-format-resolution-explicit-button video-js-overflow-explicit-selected-button" data-resolution="auto"><span class="video-js-chosen-item">' + MATERIAL_DONE_SVG + '</span><span>auto</span></button>';
									}
									else {
										html += '<button type="button" class="video-js-overflow-format-resolution-explicit-button" data-resolution="auto"><span class="video-js-chosen-item hidden-elem">' + MATERIAL_DONE_SVG + '</span><span>auto</span></button>';
									}
								}
								
								html += '</div>';
								
								$("#video-player .vjs-control-bar .video-js-overflow-menu").replaceWith(html);

								// back from resolutions menu to formats menu
								$('.video-js-back-to-overflow-formats-button').click(function(event) {
									event.stopPropagation();
									
									showOverflowMenuFormats();
								});

								$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-format-resolution-explicit-button').click(function(event) {
									event.stopPropagation();
									
									CURRENT_VIDEO_FORMAT = selectedVideoFormat;
									CURRENT_VIDEO_RESOLUTION = $(this).data('resolution');
									
									$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-format-resolution-explicit-button .video-js-chosen-item').addClass('hidden-elem');
									$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-format-resolution-explicit-button').removeClass('video-js-overflow-explicit-selected-button');
									
									$(this).addClass('video-js-overflow-explicit-selected-button');
									$(this).find('.video-js-chosen-item').removeClass('hidden-elem');

									var source;

									if(CURRENT_VIDEO_FORMAT === 'm3u8') {
										if(CURRENT_VIDEO_RESOLUTION === 'auto') {
											source = { src: adaptiveSources[0].src, type: adaptiveSources[0].type };
										}
										else {
											for(const adaptiveSource of adaptiveSources) {
												const segments = adaptiveSource.src.split('/');
												const adaptiveSourceResolution = segments[segments.length - 1];

												if(adaptiveSourceResolution === ('manifest-' + CURRENT_VIDEO_RESOLUTION + '.' + CURRENT_VIDEO_FORMAT)) {
													source = { src: adaptiveSource.src, type: adaptiveSource.type };
												}
											}
										}
									}
									else {
										for(const progressiveSource of progressiveSources) {
											const segments = progressiveSource.src.split('/');

											const progressiveSourceResolution = segments[segments.length - 1];
											const progressiveSourceFormat = segments[segments.length - 2];

											if(CURRENT_VIDEO_RESOLUTION === progressiveSourceResolution && CURRENT_VIDEO_FORMAT === progressiveSourceFormat) {
												source = { src: progressiveSource.src, type: progressiveSource.type };
											}
										}
									}

									const currentTime = player.currentTime();

									player.src(source);
									player.currentTime(currentTime);

									player.play()
									.then(function() {
										// do nothing
									})
									.catch(function(error) {
										console.log(error);
									});
								});
							}

							function showPlayRateMenu() {
								const playbackRates = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75, 2.0];
								
								var html = '<div class="video-js-overflow-menu">\
								<button type="button" class="video-js-back-to-overflow-main-button"><span>Playback speed</span>' + MATERIAL_NAVIGATE_BEFORE_SVG + '</button>';
								
								playbackRates.forEach(function(playbackRate) {
									if(playbackRate === currentPlaybackRate) {
										html += '<button type="button" class="video-js-overflow-explicit-button video-js-overflow-explicit-selected-button" data-playbackrate="' + playbackRate + '"><span class="video-js-chosen-item">' + MATERIAL_DONE_SVG + '</span><span>' + playbackRate + '</span></button>';
									}
									else {
										html += '<button type="button" class="video-js-overflow-explicit-button" data-playbackrate="' + playbackRate + '"><span class="video-js-chosen-item hidden-elem">' + MATERIAL_DONE_SVG + '</span><span>' + playbackRate + '</span></button>';
									}
								});
								
								html += '</div>';
								
								$("#video-player .vjs-control-bar .video-js-overflow-menu").replaceWith(html);
								
								$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-explicit-button').click(function(event) {
									event.stopPropagation();
									
									const selectedPlaybackRate = $(this).data('playbackrate');
									
									$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-explicit-button .video-js-chosen-item').addClass('hidden-elem');
									$('#video-player .vjs-control-bar .video-js-overflow-menu .video-js-overflow-explicit-button').removeClass('video-js-overflow-explicit-selected-button');
									
									$(this).addClass('video-js-overflow-explicit-selected-button');
									$(this).find('.video-js-chosen-item').removeClass('hidden-elem');
									
									player.playbackRate(selectedPlaybackRate);
								});
								
								$('.video-js-back-to-overflow-main-button').click(function(event) {
									event.stopPropagation();

									showOverflowMenuMain();
								});
							}
						}
						
						function removeOverflowMenuHtml() {
							$('#video-player .vjs-control-bar .video-js-overflow-menu').remove();
						}
					}

					function configurePlayerEvents() {
						player.on(["loadstart", "firstplay", "pause", "ended", "adplay", "adplaying", "adfirstplay", "adpause", "adended", "contentplay", "contentplaying", "contentfirstplay", "contentpause", "contentended", "contentupdate"], function(e) {
							//console.log(e);
						});
						
						player.on(["fullscreenchange"], function(e) {
							if(player.isFullscreen()) {
								theaterModeButtonDom.classList.add('hidden-elem');
							}
							else {
								theaterModeButtonDom.classList.remove('hidden-elem');
							}
						});
						
						player.on("loadedmetadata", function() { 
							console.log('loadedmetadata');

							player.play()
							.then(function() {
							
							})
							.catch(function(error) {
								console.log(error);

								$('#mtp-video-overlay').removeClass('hidden-elem');
							});
						});
						
						player.on("playing", function() { 
							console.log('playing');

							$('#mtp-video-overlay').remove();
						});
						
						player.on("loadstart", function() { 
							console.log('loadstart');
						});
						
						player.on("ready", function() { 
							console.log('ready');

							player.play()
							.then(function() {
							
							})
							.catch(function(error) {
								console.log(error);

								$('#mtp-video-overlay').removeClass('hidden-elem');
							});
						});
						
						$('#big-play-button-poster-container').click(async function(event) {
							$('#mtp-video-overlay').remove();
							
							player.play()
							.then(function() {
							
							})
							.catch(function(error) {
								console.log(error);
							});
						});
					}
				}
			}

            function connectWebsocket() {
				var connectWebsocketClient = function() {
					try {
						$('#live-stream-chat-container').removeClass('hidden-elem');
						
						const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
						const hostname = window.location.hostname;
						const port = window.location.port;
						
						var ws = new WebSocket(protocol + '//' + hostname + ':' + port);
						
						ws.onopen = () => {
							ws.send(JSON.stringify({eventName: 'register', socketType: 'node_peer'}));
						};
						
						ws.onclose = () => {
							setTimeout(() => {
								connectWebsocketClient();
							}, 3000);
						};

						ws.onmessage = (message) => {
							const data = JSON.parse(message.data);
							
							if(data.eventName === 'registered') {
								ws.send(JSON.stringify({eventName: 'chat', type: 'join', videoId: VIDEO_ID}));
							}
							else if(data.eventName === 'joined') {
								$('#send-chat-message-input').prop('placeholder', 'Type your message');
								$('#send-chat-message-input').prop('disabled', false);
								$('#send-chat-message-button').prop('disabled', false);
								
								$('#send-chat-message-button').off('click').on('click', function(event) {
									broadcastChatMessageContent();
								});
								
								$('#send-chat-message-input').off('keypress').on('keypress', function(event) {
									if (event.keyCode === 13) {
										broadcastChatMessageContent();
									}
								});
								
								function broadcastChatMessageContent() {
									if (ws.readyState === WebSocket.OPEN) {
										const chatMessageContent = $('#send-chat-message-input').val();
										
										$('#send-chat-message-input').val('');
										
										ws.send(JSON.stringify({eventName: 'chat', type: 'message', videoId: VIDEO_ID, chatMessageContent: chatMessageContent}));
									}
								}
								
								$.ajax({type: 'GET', url: '/streams/' + VIDEO_ID + '/chat/history'})
								.done(function (data) {
									if(data.isError) {
										console.log(data.message);
									}
									else {
										const chatHistory = data.chatHistory;

										$("#chat-messages").empty();
										
										for(const chatMessage of chatHistory) {
											const chatMessageContent = chatMessage.chat_message;
											const username = chatMessage.username;
											const usernameColorCode = chatMessage.username_color_hex_code;
											
											appendMessageAndConditionallyScroll(chatMessageContent, username, usernameColorCode);
										}
									}
								})
								.fail(function() {
									console.log('unable to communicate with node');
								});
							}
							else if(data.eventName === 'message') {
								const chatMessageContent = data.chatMessageContent;
								const username = data.username;
								const usernameColorCode = data.usernameColorCode;
								
								appendMessageAndConditionallyScroll(chatMessageContent, username, usernameColorCode);
							}
							else if(data.eventName === 'live_stream_stats') {
								const watchingCount = data.watchingCount;
								
								$('#video-information-views').text(watchingCount + ' watching now');
							}
							else if(data.eventName === 'limited') {
								var rateLimitSeconds = data.rateLimitSeconds;
								
								$('#send-chat-message-input').prop('disabled', true);
								$('#send-chat-message-button').prop('disabled', true);
								
								$('#send-chat-message-button').text('Send (' + rateLimitSeconds + ')');
							
								const interval = setInterval(function() {
									rateLimitSeconds--;
									
									$('#send-chat-message-button').text('Send (' + rateLimitSeconds + ')');
									
									if(rateLimitSeconds === 0) {
										clearInterval(interval);
										
										$('#send-chat-message-button').text('Send');
										
										$('#send-chat-message-input').prop('disabled', false);
										$('#send-chat-message-button').prop('disabled', false);
									}
								}, 1000);
							}
						};
						
						function appendMessageAndConditionallyScroll(chatMessageContent, username, usernameColorCode) {
							const chatMessagesContainer = $("#chat-messages-container");
							const chatMessages = $("#chat-messages");
							
							$(chatMessages).append('<div class="chat-message pb-2"><div class="flex-shrink-1 rounded px-2"><b style="color:#' + usernameColorCode + ';font-size:0.8em;">' + username + '</b>: <span class="live-chat-text-color">' + chatMessageContent + '</span></div></div>');
							
							const isNearBottom = $(chatMessagesContainer)[0].scrollHeight - $(chatMessagesContainer).scrollTop() - $(chatMessagesContainer).outerHeight() < 100;
							
							if (isNearBottom) {
								$(chatMessagesContainer).scrollTop($(chatMessagesContainer)[0].scrollHeight);
							}
						}
					}
					catch(error) {
                        
					}
				};
				
				connectWebsocketClient();
			}
			
			$(document).on('submit', '.comment-input-form', function(event) {
				event.preventDefault();
				
				const form = $(this);
				const captchaType = form.data('captchatype');
				
				const commentPlainText = form.find('textarea[name="commentPlainText"]').val();
				const captchaResponse = form.find('input[name="captchaResponse"]').val();
				
				if(commentPlainText !== '' && captchaResponse !== '') {
					form.find(':submit').prop('disabled', true);
					form.find('textarea[name="commentPlainText"]').prop('disabled', true);
					form.find('input[name="captchaResponse"]').prop('disabled', true);
					
					$.post('/videos/' + VIDEO_ID + '/comments/comment', {commentPlainText: commentPlainText, captchaResponse: captchaResponse, captchaType: captchaType, timestamp: MOST_RECENT_VISIBLE_COMMENT_TIMESTAMP})
					.always(function() {
						form.find(':submit').prop('disabled', false);
						form.find('textarea[name="commentPlainText"]').prop('disabled', false);
						form.find('input[name="captchaResponse"]').prop('disabled', false);
					})
					.done(function(data) {
						if(data.isError) {
							form.find('input[name="captchaResponse"]').val('');
							
							if(captchaType === 'static') {
								$('#comment-input-form-static-error-message').text(data.message);
							}
							else if(captchaType === 'dynamic') {
								$('#comment-input-form-dynamic-error-message').text(data.message);
							}
							
							if(data.message == 'the captcha was not correct') {
								getCaptcha('/captcha/comments?captchaType=' + captchaType)
								.then((objectURL) => {
									if(captchaType === 'static') {
										$('#comment-input-form-static-captcha').html('<img src="' + objectURL + '">');
									}
									else if(captchaType === 'dynamic') {
										$('#comment-input-form-dynamic-captcha').html('<img src="' + objectURL + '">');
									}
								})
								.catch(error => {
									if(captchaType === 'static') {
										$('#comment-input-form-static-error-message').html(error);
									}
									else if(captchaType === 'dynamic') {
										$('#comment-input-form-dynamic-error-message').html(error);
									}
								});
							}
							else {
								console.log(data.message);
							}
						}
						else {
							if(captchaType === 'static') {
								form.find('#comment-input-form-static-submit-container').addClass('hidden-elem');
								form.find('#comment-input-form-static-captcha-container').removeClass('hidden-elem');
							}
							else if(captchaType === 'dynamic') {
								form.remove();
								
								form.find('#comment-input-form-dynamic-submit-container').addClass('hidden-elem');
								form.find('#comment-input-form-dynamic-captcha-container').removeClass('hidden-elem');
							}
							
							form.find('textarea[name="commentPlainText"]').val('');
							form.find('input[name="captchaResponse"]').val('');
							
							const commentId = data.commentId;
							const comments = data.comments;
							
							addToCommentHistory(commentId);
							
							loadComments(comments, 'before', true);
						}
					})
					.fail(function() {
						
					});
				}
			});
			
			function loadComments(comments, type, highlight) {
				const commentsContainer = $('#comments-container');

				commentsContainer.find('.post.reply').removeClass('new-comment-highlight');
				
				if(comments.length > 0) {
					const commentHistory = getCommentHistory();
					
					$('.comments-navigation-button').removeClass('hidden-elem');
					
					if(type === 'before') {
						const commentSectionCounter = $('#comment-section-counter');
						const commentSectionCounterDescriptor = $('#comment-section-counter-descriptor');
						const expandCommentSectionCounter = $('#expand-comment-section-counter');
						const expandCommentSectionCounterDescriptor = $('#expand-comment-section-counter-descriptor');
						
						commentSectionCounter.text(parseInt($(commentSectionCounter).text()) + comments.length);
						expandCommentSectionCounter.text(parseInt($(expandCommentSectionCounter).text()) + comments.length);
						
						if(parseInt($(commentSectionCounter).text()) === 1) {
							commentSectionCounterDescriptor.text('Comment');
						}
						else {
							commentSectionCounterDescriptor.text('Comments');
						}
						
						if(parseInt($(expandCommentSectionCounter).text()) === 1) {
							expandCommentSectionCounterDescriptor.html('Comment');
						}
						else {
							expandCommentSectionCounterDescriptor.html('Comments');
						}
					}
					
					comments.forEach(function(comment) {
						const commentId = comment.id;
						const commentPlainTextSanitized = comment.comment_plain_text_sanitized;
						const timestamp = comment.timestamp;
						
						if(timestamp > MOST_RECENT_VISIBLE_COMMENT_TIMESTAMP) {
							MOST_RECENT_VISIBLE_COMMENT_TIMESTAMP = timestamp;
						}
						
						const formattedDate = getCreationTimestampFormatted(timestamp);
						const commentTextHtml = convertCommentToHTML(commentPlainTextSanitized);
						const replyToCommentIds = extractReplyToCommentIds(commentPlainTextSanitized);
						
						const commentElement = generateCommentElement(commentId, formattedDate, commentTextHtml, highlight);
						
						// cache comments in memory for efficient access
						COMMENT_ELEMENT_CACHE[commentId] = commentElement;
						
						// keep track of the IDs of comments that have replied to this comment
						for(const replyToCommentId of replyToCommentIds) {
							if(!COMMENT_REPLIES_CACHE.hasOwnProperty(replyToCommentId)) {
								COMMENT_REPLIES_CACHE[replyToCommentId] = [];
							}
						
							COMMENT_REPLIES_CACHE[replyToCommentId].push(commentId);
						}
						
						// append (you) to quotelinks within the body of the comment that references comments this user has made
						for(const commentHistoryId of commentHistory) {
							if(replyToCommentIds.includes(commentHistoryId)) {
								$(commentElement).find('#m' + commentId).find('.quotelink').each(function(index, element) {
									var elementHref = $(element).attr('href');
									if(elementHref === ('#p' + commentHistoryId)) {
										$(element).append(' (you)');
									}
								});
							}
						}
						
						if(type === 'before') {
							// 'before' means prepending to the comments
							// append links to backlinks of comments that reference the comments being prepended to the comments
							for(const replyToCommentId of replyToCommentIds) {
								if(COMMENT_ELEMENT_CACHE.hasOwnProperty(replyToCommentId)) {
									var youString = '';
									if(commentHistory.includes(commentId)) {
										youString = ' (you)';
									}
									$(COMMENT_ELEMENT_CACHE[replyToCommentId]).find('#bl_' + replyToCommentId).append('<a href="#p' + commentId + '" class="quotelink">&gt;&gt;' + commentId + youString + '</a> ');
									
									attachQuotelinkListeners(COMMENT_ELEMENT_CACHE[replyToCommentId]);
								}
							}
							
							$(commentsContainer).prepend(commentElement);
						}
						else if(type === 'after') {
							// 'after' means  appending to the comments
							// append links to backlinks of comments that reference the comments being appended to the comments
							if(COMMENT_REPLIES_CACHE.hasOwnProperty(commentId)) {
								for(const replyToCommentId of COMMENT_REPLIES_CACHE[commentId]) {
									var youString = '';
									if(commentHistory.includes(replyToCommentId)) {
										youString = ' (you)';
									}
									$(commentElement).find('#bl_' + commentId).prepend('<a href="#p' + replyToCommentId + '" class="quotelink">&gt;&gt;' + replyToCommentId + youString + '</a> ');
								}
							}
							
							$(commentsContainer).append(commentElement);
						}
						
						attachQuotelinkListeners(commentElement);
					});
				}
				
				function generateCommentElement(commentId, formattedDate, commentTextHtml, highlight) {
					const commentElement = $('\
					<div class="postContainer replyContainer" id="pc' + commentId + '">\
					  <div id="p' + commentId + '" class="post reply">\
						<div class="postInfoM mobile" id="pim' + commentId + '">\
						  <span class="nameBlock">\
							<span class="name">Anonymous</span>\
							<br>\
						  </span>\
						  <span class="dateTime postNum">(' + formattedDate + ')\
							<a href="#p' + commentId + '" title="Link to this post">No.</a>\
							<a href="javascript:quote(\'' + commentId + '\');" title="Reply to this post">' + commentId + '</a>\
						  </span>\
						</div>\
						<div class="postInfo desktop" id="pi' + commentId + '">\
						  <span class="nameBlock">\
							<span class="name">Anonymous</span>\
						  </span>\
						  <span class="dateTime">(' + formattedDate + ')</span>\
						  <span class="postNum desktop">\
							<a class="tests" href="#p' + commentId + '" title="Link to this post">No.</a>\
							<a href="javascript:quote(\'' + commentId + '\');" title="Reply to this post">' + commentId + '</a>\
						  </span>\
						  <a class="postMenuBtn" title="Post menu" role="button" data-cmd="post-menu" data-bs-toggle="dropdown" aria-expanded="false" id="comment-' + commentId + '-dropdown-button">&#x25B6;</a>\
						  <ul class="dropdown-menu" aria-labelledby="comment-' + commentId + '-dropdown-button"><li><a class="dropdown-item" role="button" onclick="reportComment(\'' + commentId + '\');">Report</a></li></ul>\
						  <div id="bl_' + commentId + '" class="backlink"></div>\
						</div>\
						<blockquote class="postMessage text-break" id="m' + commentId + '">' + commentTextHtml + '</blockquote>\
					  </div>\
					</div>');

					if(highlight) {
						commentElement.find('.post.reply').addClass('new-comment-highlight');
					}
					
					return commentElement;
				}
				
				function showQuotePreview(quotePreview, quotelink) {
					quotePreview.id = 'quote-preview';
					
					const targetElement = quotePreview.querySelector('.post.reply');
					
					if(targetElement != null) {
						targetElement.classList.remove('highlight-anti');
						targetElement.classList.add('highlight');
					}
					
					$('#quote-preview').remove();
					$('body').append(quotePreview);
					
					const quotelinkWidth = quotelink.offsetWidth;
					const quotelinkHeight = quotelink.offsetHeight;
					const targetElementHeight = quotePreview.offsetHeight;
					const scrollY = window.pageYOffset || document.documentElement.scrollTop;
					
					quotePreview.style.position = 'absolute';
					quotePreview.style.left = quotelink.getBoundingClientRect().left + quotelinkWidth + 5;
					quotePreview.style.top = scrollY + quotelink.getBoundingClientRect().top - (targetElementHeight / 2) + (quotelinkHeight / 2);
				}
				
				function convertCommentToHTML(commentPlainTextSanitized) {
					const lines = commentPlainTextSanitized.trim().split('\n');
					
					const html = lines.map(line => {
						const trimmedLine = line.trim();
						if (trimmedLine.startsWith('&gt;&gt;')) {
							const commentId = trimmedLine.substr(8);
							const quoteLink = '<a href="#p' + commentId + '" class="quotelink">' + trimmedLine + '</a>';
							return quoteLink;
						} else if (trimmedLine.startsWith('&gt;&gt;')) {
							const quotedText = '<span class="quote">' + trimmedLine + '</span>';
							return quotedText;
						} else {
							return trimmedLine;
						}
					}).join('<br>');

					return html;
				}
				
				function extractReplyToCommentIds(commentPlainTextSanitized) {
					const regex = /&gt;&gt;(\d+)/g;
					const matches = [];
					let match;

					while ((match = regex.exec(commentPlainTextSanitized)) !== null) {
						matches.push(parseInt(match[1]));
					}

					return matches;
				}
				
				function attachQuotelinkListeners(commentElement) {
					$(commentElement).find('.quotelink').mouseenter(function() {
						const quotelink = this;
						
						const commentId = $(this).text().match(/\d+/g)[0];
						const comment = $('#p' + commentId);
						
						const div = document.getElementById('pc' + commentId);
						
						if(div == null) {
							$.ajax({type: 'GET', url: '/videos/' + VIDEO_ID + '/comments/' + commentId})
							.done(function (data, textStatus, xhr)
							{
								if(data.isError) {
									console.log(data.message);
								}
								else {
									const comment = data.comment;
									
									if(comment == null) {
										$(quotelink).addClass('deadlink');
									}
									else {
										const commentId = comment.id;
										const commentPlainTextSanitized = comment.comment_plain_text_sanitized;
										const timestamp = comment.timestamp;
										
										const formattedDate = getCreationTimestampFormatted(timestamp);
										const commentTextHtml = convertCommentToHTML(commentPlainTextSanitized);
										
										const commentElement = generateCommentElement(commentId, formattedDate, commentTextHtml, false)[0];
										
										showQuotePreview(commentElement, quotelink);
									}
								}
							})
							.fail(function()
							{
								console.log('unable to communicate with node');
							});
						}
						else {
							// couldn't get the following to work via JQuery's bounding box API, so using native DOM approach because I can do what I want
							
							const divOffset = div.getBoundingClientRect();
							const divHeight = div.offsetHeight;
							const windowHeight = window.innerHeight || document.documentElement.clientHeight;

							const topLeftCornerAboveScreen = divOffset.top < 0;
							const topRightCornerAboveScreen = (divOffset.top < 0) && ((divOffset.left + div.offsetWidth) > window.innerWidth || document.documentElement.clientWidth);
							const bottomLeftCornerBelowScreen = (divOffset.top + divHeight) > windowHeight;
							const bottomRightCornerBelowScreen = ((divOffset.top + divHeight) > windowHeight) && ((divOffset.left + div.offsetWidth) > window.innerWidth || document.documentElement.clientWidth);

							if (topLeftCornerAboveScreen || topRightCornerAboveScreen || bottomLeftCornerBelowScreen || bottomRightCornerBelowScreen) {
								const clonedElement = div.cloneNode(true);
								
								showQuotePreview(clonedElement, quotelink);
							}
							else {
								if(comment.length) {
									if (comment.is(':target')) {
										$(comment).addClass('highlight-anti');
									}
									else {
										$(comment).addClass('highlight');
									}
								}
								else {
									$(quotelink).addClass('deadlink');
								}
							}
						}
					});
					
					$(commentElement).find('.quotelink').mouseleave(function() {
						$('#quote-preview').remove();
						
						const commentId = $(this).text().match(/\d+/g)[0];
						const comment = $('#p' + commentId);
						
						if (comment.is(':target')) {
							$(comment).removeClass('highlight-anti');
						}
						else {
							$(comment).removeClass('highlight');
						}
					});
					
					$(commentElement).find('.quotelink').click(function() {
						$('#quote-preview').remove();
						
						const commentId = $(this).text().match(/\d+/g)[0];
						const comment = $('#p' + commentId);
						
						HASH_VALUE = '#p' + commentId;
						
                        $('.post').removeClass('highlight');
                        
                        if (comment.is(':target')) {
                            $(comment).removeClass('highlight-anti');
                        }
                        else {
                            $(comment).removeClass('highlight');
                        }
					});
				}
			}
			
			async function updateComments() {
				$('#update-comments-button').addClass('hidden-elem');
				$('#update-comments-button-spinner').removeClass('hidden-elem');
				
				const previousCommentCount = parseInt($('#comment-section-counter').text());
				
                $.ajax({type: 'GET', url: '/videos/' + VIDEO_ID + '/comments', data: { timestamp: MOST_RECENT_VISIBLE_COMMENT_TIMESTAMP, type: 'before'}})
                .done(function (data, textStatus, xhr)
                {
                    if(data.isError) {
                        console.log(data.message);
                    }
                    else {
                        const comments = data.comments;
                        
                        loadComments(comments, 'before', true);

                        const newCommentCount = parseInt($('#comment-section-counter').text());
                        
                        $('#update-comments-button').removeClass('hidden-elem');
                        $('#update-comments-button-spinner').addClass('hidden-elem');
                        
                        var commentCountDifference = newCommentCount - previousCommentCount;
                        
                        if(commentCountDifference === 1) {
                            $('#comment-section-update-descriptor').text('1 new comment');
                        }
                        else {
                            $('#comment-section-update-descriptor').text(commentCountDifference + ' new comments');
                        }
                        
                        setTimeout(function() {
                            $('#comment-section-update-descriptor').text('');
                        }, 3000);
                    }
                })
                .fail(function()
                {
                    console.log('unable to communicate with node');
                });
			}
			
			function openCommentSection() {
				$('#recommended-videos-list-container').css('display', 'none');
				$('#expand-comment-section').css('display', 'none');
				$('#comment-section').css('display', 'block');
				$('#comment-section-back-button-container').removeClass('hidden-elem');
				
				refreshTextAreas();
			}
			
			function closeCommentSection() {
				$('#comment-section-back-button-container').addClass('hidden-elem');
				$('#comment-section').css('display', 'none');
				$('#expand-comment-section').css('display', 'block');
				$('#recommended-videos-list-container').css('display', 'block');
			}
			
			function downloadVideo() {
				if(DOWNLOADABLE_SOURCES.length > 0) {
					var html = '';

					for(const downloadableSource of DOWNLOADABLE_SOURCES) {
						const segments = downloadableSource.src.split('/');
						const downloadLink = downloadableSource.src + '/download';
						
						html += '<a href="' + downloadLink + '"><button type="button" class="btn btn-link">' + segments[3] + '-' + segments[4] + '</button></a><br>';
					}

					Swal.fire({
						title: 'download video',
						html: html,
						showCloseButton: true,
						showConfirmButton: false
					});
				}
				else {
					Swal.fire({
						icon: 'info',
						html: '<p>this video doesn\'t have an available format for download<br>(mp4, webm, ogv)</p>',
						showCloseButton: true,
						showConfirmButton: false
					});
				}
			}
			
			function shareVideo() {
				const videoId = VIDEO_ID;
				
				Swal.fire({
					title: '...preparing to share video...',
					html: '',
					showConfirmButton: false,
					showCloseButton: true,
					showCancelButton: false,
					willOpen: () => {
						const nodeVideoUrl = NODE_BASE_URL + '/watch?v=' + videoId
						
						$.ajax({type: 'GET', url: '/videos/' + videoId + '/information'})
						.done(function (data, textStatus, xhr) {
							const information = data.information;
							
							const title = information.title;
							
							$.ajax({type: 'GET', url: '/videos/' + videoId + '/alias'})
							.done(function (data, textStatus, xhr) {
								var videoAliasUrl = 'MoarTube Aliaser link unavailable';

								if(data.isError) {
									showShareLinks(videoId, nodeVideoUrl, videoAliasUrl);
								}
								else {
									videoAliasUrl = data.videoAliasUrl;
									
									if(videoAliasUrl === '') {
										getCaptcha('/captcha/alias')
										.then((objectURL) => {
											const html = '<div id="alias-captcha-container"><div id="alias-captcha-img-container"><img src="' + objectURL + '"></div>\
											<div class="input-group mt-2"><input id="alias-captcha-input" class="form-control" type="text" placeholder="enter the captcha"></div>\
											<div><button id="alias-captcha-submit" class="btn btn-primary mt-2">create share links</button></div></div>';
											
											Swal.update({
												title: 'Share',
												html: html
											});
											
											$('#alias-captcha-input').focus();
											
											$('#alias-captcha-submit').click(function(event) {
												const captchaResponse = $('#alias-captcha-input').val();
												
												$('#alias-captcha-input').attr('disabled', true);
												$('#alias-captcha-submit').attr('disabled', true);
												
												$.ajax({type: 'POST', url: '/videos/' + videoId + '/alias', data: { captchaResponse: captchaResponse }})
												.always(function() {
													$('#alias-captcha-input').attr('disabled', false);
													$('#alias-captcha-submit').attr('disabled', false);
												})
												.done(function (data, textStatus, xhr) {
													if(data.isError) {
														if(data.message === 'the captcha was not correct') {
															getCaptcha('/captcha/alias')
															.then((objectURL) => {
																$('#alias-captcha-img-container').html('<img src="' + objectURL + '">');
																$('#alias-captcha-input').val('');
															})
															.catch(error => {
																$('#report-error-message').text(error);
															});
														}
													}
													else {
														const videoAliasUrl = data.videoAliasUrl;
														
														showShareLinks(videoId, nodeVideoUrl, videoAliasUrl);
													}
												})
												.fail(function() {
													showShareLinks(videoId, nodeVideoUrl, videoAliasUrl);
												});
											});
										})
										.catch(error => {
											showShareLinks(videoId, nodeVideoUrl, videoAliasUrl);
										});
									}
									else {
										showShareLinks(videoId, nodeVideoUrl, videoAliasUrl);
									}
								}

								function showShareLinks(videoId, nodeVideoUrl, videoAliasUrl) {
									const embedUrl = NODE_BASE_URL + '/watch/embed/video/' + videoId + '?autostart=0';
									
									const embedHtml_1 = '<iframe class="w-100" src="' + NODE_BASE_URL + '/watch/embed/video/' + videoId + '?autostart=0" title="MoarTube video player" frameborder="0" style="aspect-ratio: 16/9;" allow="accelerometer; autoplay; clipboard-write; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>';
									const embedHtml_2 = '<iframe src="' + NODE_BASE_URL + '/watch/embed/video/' + videoId + '?autostart=0" title="MoarTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>';
									
									const embedSVG = '<svg viewBox="0 0 36 36" focusable="false" style="pointer-events: none; display: block; width: 100%; height: 100%;"><circle cx="18" cy="18" r="17.5" stroke="#E7E7E7" fill="#F4F4F4" stroke-width=".5"></circle><path d="m21.41,23.29l-0.71,-0.71l4.59,-4.58l-4.59,-4.59l0.71,-0.71l5.3,5.3l-5.3,5.29zm-6.12,-0.7l-4.58,-4.59l4.59,-4.59l-0.71,-0.7l-5.3,5.29l5.29,5.29l0.71,-0.7z" fill="#606060"></path></svg>';
									const twitterSVG = '<svg viewBox="0 0 60 60" focusable="false" style="pointer-events: none; display: block; width: 100%; height: 100%;"><g fill="none" fill-rule="evenodd"><path d="M28.486325 59.969298c-6.636404-.569063-11.56302-2.326956-16.321973-5.823932C4.443764 48.472116 0 39.646792 0 29.986934 0 15.11156 10.506778 2.798388 25.274412.36718c6.028107-.992411 12.703853.049265 18.28794 2.85363 13.576275 6.818095 19.7813 22.541053 14.64267 37.103159-3.527955 9.997705-12.789708 17.617785-23.391072 19.244938-2.085625.320112-5.065149.508645-6.327625.400391z" fill="#1DA1F2" fill-rule="nonzero"></path><path d="M45.089067 17.577067c-.929778.595555-3.064534 1.460977-4.117334 1.460977v.001778C39.7696 17.784 38.077156 17 36.200178 17c-3.645511 0-6.6016 2.956089-6.6016 6.600178 0 .50631.058666 1.000178.16711 1.473778h-.001066c-4.945066-.129778-10.353422-2.608356-13.609244-6.85049-2.001778 3.46489-.269511 7.3184 2.002133 8.72249-.7776.058666-2.209067-.0896-2.882844-.747023-.045156 2.299734 1.060622 5.346845 5.092622 6.452267-.776533.417778-2.151111.297956-2.7488.209067.209778 1.941333 2.928355 4.479289 5.901155 4.479289C22.46009 38.565156 18.4736 40.788089 14 40.080889 17.038222 41.929422 20.5792 43 24.327111 43c10.650667 0 18.921956-8.631822 18.4768-19.280356-.001778-.011733-.001778-.023466-.002844-.036266.001066-.027378.002844-.054756.002844-.0832 0-.033067-.002844-.064356-.003911-.096356.9696-.66311 2.270578-1.836089 3.2-3.37991-.539022.296888-2.156089.891377-3.6608 1.038932.965689-.521244 2.396444-2.228266 2.749867-3.585777" fill="#FFF"></path></g></svg>';
									const redditSVG = '<svg viewBox="0 0 60 60" focusable="false" style="pointer-events: none; display: block; width: 100%; height: 100%;"><g fill-rule="nonzero" fill="none"><path d="M28.4863253 59.9692983c-6.6364044-.569063-11.5630204-2.3269561-16.3219736-5.8239327C4.44376366 48.4721168 3e-7 39.6467924 3e-7 29.9869344c0-14.8753747 10.506778-27.18854591 25.2744118-29.61975392 6.0281072-.9924119 12.7038532.04926445 18.2879399 2.85362966C57.1386273 10.0389054 63.3436516 25.7618627 58.2050229 40.3239688 54.677067 50.3216743 45.4153135 57.9417536 34.81395 59.5689067c-2.0856252.3201125-5.0651487.5086456-6.3276247.4003916z" fill="#FF4500"></path><path d="M34.1335847 43.9991814c1.6336774-.3831682 2.81654-.7939438 3.9781753-1.3815065 3.6153903-1.8286959 5.8788354-4.8645264 5.8788354-7.8849481 0-.9131088.0196207-.9556355.780668-1.6923265.6040409-.5847092.8404012-.962515 1.044679-1.6698428.2433185-.8425206.2441028-.9826228.0100139-1.7878614-.6566532-2.2588075-3.0054252-3.2764371-5.1075029-2.212882l-.8124519.4110627-.837264-.5151716c-1.6101652-.9907471-4.473974-1.96108051-6.3205111-2.14155924-.5059537-.04945042-1.143803-.1235464-1.4174535-.16465815l-.4975382-.07474783.2136595-1.06953332c.1175125-.5882423.3623778-1.7491883.5441475-2.57987956.181767-.83069153.4095191-1.95749071.5061138-2.50399817.1396137-.78991765.2348596-.99365031.4645331-.99365031.1589005 0 1.2955101.21462853 2.5257988.4769522 1.2302915.26232367 2.2622022.47695193 2.293134.47695193.0309345 0 .1003234.23497925.154203.52217616.1363137.72661143.4902897 1.17780487 1.2134714 1.54674469 1.7356128.8854428 3.6891485-.29431302 3.6891485-2.22790474 0-2.3956262-2.9538443-3.44186625-4.4550019-1.57794377-.2901205.36022881-.4356746.42625561-.7154284.32453216-.1931649-.07023833-1.5202546-.3669593-2.9490951-.65938053-1.8923676-.38728585-2.6686067-.48706487-2.8582979-.36740978-.2896185.1826864-.2522224.047706-1.0501419 3.79055007-.9490696 4.45187338-1.0064011 4.70400786-1.0882029 4.78580828-.0432388.04324046-.729551.14596475-1.5251367.22827402-2.413687.24971784-5.06621906 1.10194849-6.8544721 2.20227189l-.8268564.5087695-.81204644-.4046587c-2.11972653-1.0563058-4.47243958-.0382468-5.1287215 2.2192841-.23408885.8052386-.23330375.9453408.0100166 1.7878614.20427624.7073278.44063816 1.0851336 1.04467744 1.6698428.76105187.736691.78066878.7792177.78066878 1.6923265 0 4.172347 4.28816886 8.1540991 10.01599352 9.3002929 1.8975637.3797217 2.0263168.3894072 4.4515526.3349143 1.5849893-.0356103 2.7274992-.1508298 3.6566327-.3687526zm-6.6864685-3.0300366c-1.3154638-.2961613-2.8032079-.9569232-3.2391341-1.4386156-.34760429-.384099-.198986-.9659493.246724-.9659493.1736296 0 .5801788.1805458.9034441.4012095 2.1828306 1.4900284 7.1085991 1.484628 9.2987021-.0101767.7054363-.4814861 1.2827246-.468194 1.3538857.0311679.0334854.234998-.1164569.4687666-.4771278.7438635-1.7511846 1.3356924-5.2646974 1.8738181-8.086494 1.2385197v-.000019zm-4.01196195-5.9075609c-.81902983-.4443886-1.22403999-1.1532958-1.22477787-2.143771-.000787-1.135302.52653614-1.8699603 1.59778946-2.2257735.76240766-.253232.85344696-.2532238 1.51689516.0001492 1.785415.6818561 2.1507834 2.909296.6724678 4.0996229-.7705198.6204159-1.7299516.7214286-2.56237455.2697724zm11.09588945.0732995c-.7590038-.3947507-1.1832989-.8746601-1.3628596-1.5414995-.3321829-1.2336253.2931784-2.4377233 1.5067529-2.9011953.6634485-.253373.754488-.2533812 1.5168976-.0001492 1.0712525.3558132 1.5986343 1.0904715 1.5977903 2.2257735-.0008141 1.0085002-.4138259 1.7116813-1.2587076 2.1427072-.7599699.3877084-1.3548626.4098285-1.9998736.0743633z" fill="#FDFDFD"></path></g></svg>';
									const facebookSVG = '<svg viewBox="0 0 60 60" focusable="false" style="pointer-events: none; display: block; width: 100%; height: 100%;"><g fill="none" fill-rule="evenodd"><path d="M28.4863253 59.9692983c-6.6364044-.569063-11.5630204-2.3269561-16.3219736-5.8239327C4.44376366 48.4721168 3e-7 39.6467924 3e-7 29.9869344c0-14.8753747 10.506778-27.18854591 25.2744118-29.61975392 6.0281072-.9924119 12.7038532.04926445 18.2879399 2.85362966C57.1386273 10.0389054 63.3436516 25.7618627 58.2050229 40.3239688 54.677067 50.3216743 45.4153135 57.9417536 34.81395 59.5689067c-2.0856252.3201125-5.0651487.5086456-6.3276247.4003916z" fill="#3B5998" fill-rule="nonzero"></path><path d="M25.7305108 45h5.4583577V30.0073333h4.0947673l.8098295-4.6846666h-4.9045968V21.928c0-1.0943333.7076019-2.2433333 1.7188899-2.2433333h2.7874519V15h-3.4161354v.021c-5.3451414.194-6.4433395 3.2896667-6.5385744 6.5413333h-.0099897v3.7603334H23v4.6846666h2.7305108V45z" fill="#FFF"></path></g></svg>';

									var twitterLink;
									var redditLink;
									var facebookLink;
									
									if(videoAliasUrl === 'MoarTube Aliaser link unavailable') {
										twitterLink = 'https://twitter.com/intent/tweet?url=' + nodeVideoUrl + '&text=' + title + '&via=MoarTubes&related=MoarTubes';
										redditLink = 'https://www.reddit.com/submit?url=' + nodeVideoUrl + '&title=' + title;
										facebookLink = 'https://www.facebook.com/dialog/share?app_id=246871938290679&href=' + nodeVideoUrl + '&display=popup';
									}
									else {
										twitterLink = 'https://twitter.com/intent/tweet?url=' + videoAliasUrl + '&text=' + title + '&via=MoarTubes&related=MoarTubes';
										redditLink = 'https://www.reddit.com/submit?url=' + videoAliasUrl + '&title=' + title;
										facebookLink = 'https://www.facebook.com/dialog/share?app_id=246871938290679&href=' + videoAliasUrl + '&display=popup';
									}
									
									const html = $('<div class="share-icon-container"><a href="' + twitterLink + '" target="_blank"><button class="share-icon-button"><div class="share-icon-svg">' + twitterSVG + '</div><div class="share-icon-title">Twitter</div></button></a></div>\
											<div class="share-icon-container"><a href="' + redditLink + '" target="_blank"><button class="share-icon-button"><div class="share-icon-svg">' + redditSVG + '</div><div class="share-icon-title">Reddit</div></button></a></div>\
											<div class="share-icon-container"><a href="' + facebookLink + '" target="_blank"><button class="share-icon-button"><div class="share-icon-svg">' + facebookSVG + '</div><div class="share-icon-title">Facebook</div></button></a></div>\
											<div>' + embedHtml_1 + '</div>\
											<div class="input-group mt-1"><input id="node-video-url-input" class="form-control me-1" type="text" value="' + nodeVideoUrl + '" disabled><span class="input-group-btn"><button id="node-video-url-copy-button" class="btn btn-primary click-tooltip" type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="copied!" data-bs-container="body" data-bs-animation="false">copy</button></span></div>\
											<div class="input-group mt-1"><input id="moartube-video-alias-url-input" class="form-control me-1" type="text" value="' + videoAliasUrl + '" disabled><span class="input-group-btn"><button id="moartube-video-alias-url-copy-button" class="btn btn-primary click-tooltip" type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="copied!" data-bs-container="body" data-bs-animation="false">copy</button></span></div>\
											<div class="input-group mt-1"><input id="video-alias-embed-url-input" class="form-control me-1" type="text" value="" disabled><span class="input-group-btn"><button id="video-alias-embed-url-copy-button" class="btn btn-primary click-tooltip" type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="copied!" data-bs-container="body" data-bs-animation="false">copy</button></span></div>\
											<div class="input-group mt-1"><input id="video-alias-embed-code-input" class="form-control me-1" type="text" value="" disabled><span class="input-group-btn"><button id="video-alias-embed-code-copy-button" class="btn btn-primary click-tooltip" type="button" data-bs-toggle="tooltip" data-bs-placement="top" title="copied!" data-bs-container="body" data-bs-animation="false">copy</button></span></div>');
									
									$(html).find('#video-alias-embed-url-input').val(embedUrl);
									$(html).find('#video-alias-embed-code-input').val(embedHtml_2);
									
									Swal.update({
										title: 'Share',
										html: html
									});
									
									$('#video-alias-embed-url-copy-button').click(function(event) {
										const value = $('#video-alias-embed-url-input').val();
										
										setClipboard(value);
									});
									
									$('#video-alias-embed-code-copy-button').click(function(event) {
										const value = $('#video-alias-embed-code-input').val();
										
										setClipboard(value);
									});
									
									$('#moartube-video-alias-url-copy-button').click(function(event) {
										const value = $('#moartube-video-alias-url-input').val();
										
										setClipboard(value);
									});
									
									$('#node-video-url-copy-button').click(function(event) {
										const value = $('#node-video-url-input').val();
										
										setClipboard(value);
									});
									
									if(videoAliasUrl === 'MoarTube Aliaser link unavailable') {
										$(html).find('#moartube-video-alias-url-copy-button').addClass('hidden-elem');
									}
									
									refreshClickTooltips();
								}
							})
							.fail(function()
							{
								console.log('unable to communicate with node');
							});
						})
						.fail(function()
						{
							console.log('unable to communicate with node');
						});
					},
					didOpen: () => {
						Swal.showLoading();
					}
				});
			}
			
			
			
			/*
			like/dislike logic:
				MoarTube does not conduct node-side like/dislike tracking of its users
				such information is held entirely client-side utilizing the localstorage API
				MoarTube node only keeps track of like/dislike counters
			*/
			async function likeVideo() {
				if(typeof(Storage) != null) {
					const localStorageKey = VIDEO_ID + '-like-dislike';
					
					const videoLikeButton = $('#video-like-button');
					const videoDislikeButton = $('#video-dislike-button');
					
					const value = localStorage.getItem(localStorageKey);
					
					$(videoLikeButton).blur();
					
					try {
						if(value == null) {
							performLike(true, false)
							.then(() => {
								console.log('no like or dislike for this video; user is liking');
								
								incrementLikeCount();
								
								$(videoLikeButton).addClass('btn-primary').removeClass('btn-outline-primary');
								
								localStorage.setItem(localStorageKey, 'like');
							})
							.catch(error => {
								
							});
						}
						else {
							if(value === 'like') {
								performLike(false, false)
								.then(() => {
									console.log('liked this video already, so un-liking');
									
									decrementLikeCount();
									
									$(videoLikeButton).addClass('btn-outline-primary').removeClass('btn-primary');
									
									localStorage.removeItem(localStorageKey);
								})
								.catch(error => {
									
								});
							}
							else if(value === 'dislike') {
								performLike(true, true)
								.then(() => {
									console.log('disliked this video already, so changing from disliked to liked');
									
									decrementDislikeCount();
									incrementLikeCount();
									
									$(videoDislikeButton).addClass('btn-outline-primary').removeClass('btn-primary');
									$(videoLikeButton).addClass('btn-primary').removeClass('btn-outline-primary');
									
									localStorage.setItem(localStorageKey, 'like');
								})
								.catch(error => {
									
								});
							}
						}
					}
					catch(error) {
						Swal.fire({
							icon: 'error',
							title: 'hmmm',
							html: error
						});
					}
				}
				else {
					console.log('localStorage is not supported in this browser.');
				}
			}
			
			async function dislikeVideo() {
				if(typeof(Storage) != null) {
					const localStorageKey = VIDEO_ID + '-like-dislike';
					
					const videoLikeButton = $('#video-like-button');
					const videoDislikeButton = $('#video-dislike-button');
					
					const value = localStorage.getItem(localStorageKey);
					
					$(videoDislikeButton).blur();
					
					try {
						if(value == null) {
							performDislike(true, false)
							.then(() => {
								console.log('no like or dislike for this video; user is disliking');
								
								incrementDislikeCount();
								
								$(videoDislikeButton).addClass('btn-primary').removeClass('btn-outline-primary');
							
								localStorage.setItem(localStorageKey, 'dislike');
							})
							.catch(error => {
								
							});
						}
						else {
							if(value === 'dislike') {
								performDislike(false, false)
								.then(() => {
									console.log('disliked this video already, so un-disliking');
									
									decrementDislikeCount();
									
									$(videoDislikeButton).addClass('btn-outline-primary').removeClass('btn-primary');
								
									localStorage.removeItem(localStorageKey);
								})
								.catch(error => {
									
								});
							}
							else if(value === 'like') {
								performDislike(true, true)
								.then(() => {
									console.log('liked this video already, so changing from liked to disliked');
									
									decrementLikeCount();
									incrementDislikeCount();
									
									$(videoLikeButton).addClass('btn-outline-primary').removeClass('btn-primary');
									$(videoDislikeButton).addClass('btn-primary').removeClass('btn-outline-primary');
								
									localStorage.setItem(localStorageKey, 'dislike');
								})
								.catch(error => {
									
								});
							}
						}
					}
					catch(error) {
						Swal.fire({
							icon: 'error',
							title: 'hmmm',
							html: error
						});
					}
				}
				else {
					console.log('localStorage is not supported in this browser.');
				}
			}
			
			async function performLike(isLiking, isUnDisliking) {
				return new Promise(function(resolve, reject) {
					Swal.fire({
						title: '...preparing to like...',
						showCloseButton: true,
						confirmButtonText: 'submit',
						customClass: {
							actions: 'm-0',
						},
						didOpen: () => {
							Swal.showLoading();
							
							getCaptcha('/captcha/likedislike')
							.then((objectURL) => {
								Swal.hideLoading();
								
								Swal.update({ 
									title: 'enter the captcha', 
									html: '<div class="captcha-container">......</div><div id="captcha-error"></div><div class="input-group"><input id="captcha-input" class="form-control mt-2" disabled placeholder="enter the captcha" type="text"></div>' 
								});
								
								$('#captcha-input').on('keypress', function(event) {
									if (event.keyCode === 13) {
										Swal.clickConfirm();
									}
								});
								
								$('.captcha-container').html('<img src="' + objectURL + '">');
								
								$('#captcha-input').prop('disabled', false);
								$('#captcha-input').focus();
							})
							.catch(error => {
								Swal.hideLoading();
								
								$('#captcha-input').remove();
								
								Swal.update({ 
									title: 'hmmm',
									html: error
								});
							});
						},
						preConfirm: () => {
							const captchaResponse = $('#captcha-input').val();
							
							if(captchaResponse != null && captchaResponse !== '') {
								Swal.disableButtons();
								
								$.ajax({type: 'POST', url: '/videos/' + VIDEO_ID + '/like', data: JSON.stringify({ isLiking: isLiking, isUnDisliking: isUnDisliking, captchaResponse: captchaResponse }), contentType: 'application/json; charset=utf-8'})
								.done(function (data, textStatus, xhr) {
									if(data.isError) {
										if(data.message == 'the captcha was not correct') {
											$('#captcha-input').val('');
											$('#captcha-error').text(data.message);
											
											getCaptcha('/captcha/likedislike')
											.then((objectURL) => {
												Swal.enableButtons();
												
												$('.captcha-container').html('<img src="' + objectURL + '">');
											})
											.catch(error => {
												$('#captcha-error').text(error);
											});
										}
										else {
											Swal.fire({
												icon: 'error',
												title: 'hmmm',
												html: data.message
											});
										}
									}
									else {
										Swal.close();
										
										resolve();
									}
								})
								.fail(function() {
									Swal.fire({
										icon: 'error',
										title: 'hmmm',
										html: '...something went wrong...'
									});
								});
							}
							
							return false;
						}
					});
				});
			}
			
			function performDislike(isDisliking, isUnliking) {
				return new Promise(function(resolve, reject) {
					Swal.fire({
						title: '...preparing to dislike...',
						showCloseButton: true,
						confirmButtonText: 'submit',
						customClass: {
							actions: 'm-0',
						},
						didOpen: () => {
							Swal.showLoading();
							
							getCaptcha('/captcha/likedislike')
							.then((objectURL) => {
								Swal.hideLoading();
								
								Swal.update({ 
									title: 'enter the captcha', 
									html: '<div class="captcha-container">......</div><div id="captcha-error"></div><div class="input-group"><input id="captcha-input" class="form-control mt-2" disabled placeholder="enter the captcha" type="text"></div>' 
								});
								
								$('#captcha-input').on('keypress', function(event) {
									if (event.keyCode === 13) {
										Swal.clickConfirm();
									}
								});
								
								$('.captcha-container').html('<img src="' + objectURL + '">');
								
								$('#captcha-input').prop('disabled', false);
								$('#captcha-input').focus();
							})
							.catch(error => {
								Swal.hideLoading();
								
								$('#captcha-input').remove();
								
								Swal.update({ 
									title: 'hmmm',
									html: error
								});
							});
						},
						preConfirm: () => {
							const captchaResponse = $('#captcha-input').val();
							
							if(captchaResponse != null && captchaResponse !== '') {
								Swal.disableButtons();
								
								$.ajax({type: 'POST', url: '/videos/' + VIDEO_ID + '/dislike', data: JSON.stringify({ isDisliking: isDisliking, isUnliking: isUnliking, captchaResponse: captchaResponse }), contentType: 'application/json; charset=utf-8'})
								.done(function (data, textStatus, xhr) {
									if(data.isError) {
										if(data.message == 'the captcha was not correct') {
											$('#captcha-input').val('');
											$('#captcha-error').text(data.message);
											
											getCaptcha('/captcha/likedislike')
											.then((objectURL) => {
												Swal.enableButtons();
												
												$('.captcha-container').html('<img src="' + objectURL + '">');
											})
											.catch(error => {
												$('#captcha-error').text(error);
											});
										}
										else {
											Swal.fire({
												icon: 'error',
												title: 'hmmm',
												html: data.message
											});
										}
									}
									else {
										Swal.close();
										
										resolve();
									}
								})
								.fail(function() {
									Swal.fire({
										icon: 'error',
										title: 'hmmm',
										html: '...something went wrong...'
									});
								});
							}
							
							return false;
						}
					});
				});
			}
			
			function incrementLikeCount() {
				const likeCount = $('#video-like-count').text();
				var likeCountParsed = parseInt(likeCount);
				likeCountParsed++;
				$('#video-like-count').text(likeCountParsed);
			}
			
			function decrementLikeCount() {
				const likeCount = $('#video-like-count').text();
				var likeCountParsed = parseInt(likeCount);
				likeCountParsed--;
				$('#video-like-count').text(likeCountParsed);
			}
			
			function incrementDislikeCount() {
				const dislikeCount = $('#video-dislike-count').text();
				var dislikeCountParsed = parseInt(dislikeCount);
				dislikeCountParsed++;
				$('#video-dislike-count').text(dislikeCountParsed);
			}
			
			function decrementDislikeCount() {
				const dislikeCount = $('#video-dislike-count').text();
				var dislikeCountParsed = parseInt(dislikeCount);
				dislikeCountParsed--;
				$('#video-dislike-count').text(dislikeCountParsed);
			}
			
			
			function addToCommentHistory(commentId) {
				if(typeof(Storage) != null) {
					const localStorageKey = VIDEO_ID + '-yous';
					
					var yous = localStorage.getItem(localStorageKey);
					
					if(yous == null) {
						yous = [];
					}
					else {
						yous = JSON.parse(yous);
					}
					
					yous.push(commentId);
					
					localStorage.setItem(localStorageKey, JSON.stringify(yous));
				}
			}
			
			function getCommentHistory() {
				if(typeof(Storage) != null) {
					const localStorageKey = VIDEO_ID + '-yous';
					
					var yous = localStorage.getItem(localStorageKey);
					
					if(yous == null) {
						yous = [];
						localStorage.setItem(localStorageKey, JSON.stringify(yous));
					}
					else {
						yous = JSON.parse(yous);
					}
					
					return yous;
				}
				else {
					return [];
				}
			}
			
			function reportVideo() {
				showReportModal(VIDEO_ID, 'video');
			}
			
			function reportComment(commentId) {
				showReportModal(commentId, 'comment');
			}
			
			function showReportModal(targetId, type) {
				var modalTitle = '';
				var captchaUrl = '';
				var submitUrl = '';
				
				if(type === 'video') {
					modalTitle = 'report video';
					captchaUrl = '/reports/videos/captcha';
					submitUrl = '/videos/' + targetId + '/report';
				}
				else if(type === 'comment') {
					modalTitle = 'report comment';
					captchaUrl = '/reports/comments/captcha';
					submitUrl = '/comments/' + targetId + '/report';
				}
			
				const html = '\
					<div class="input-group mb-3"><textarea id="report-message-textarea" class="swal2-textarea" placeholder="Type your report here..." maxlength="1000"></textarea></div>\
					<div class="input-group mb-3"><input id="report-email-input" class="swal2-input" placeholder="email (optional)" maxlength="100"></div>\
					<div class="input-group mb-3"> \
						<div class="input-group justify-content-center">\
							<div class="form-check"> \
							  <label class="custom-control-label" for="report-complaint">complaint&nbsp&nbsp&nbsp</label>\
							  <input id="report-complaint" class="form-check-input" type="radio" name="reportTypeRadioButton" value="complaint">\
							</div>\
							<div class="form-check">\
							  <label class="custom-control-label" for="report-copyright">copyright&nbsp&nbsp&nbsp</label>\
							  <input id="report-copyright" class="form-check-input" type="radio" name="reportTypeRadioButton" value="copyright">\
							</div>\
							<div class="form-check">\
							  <label class="custom-control-label" for="report-other">other&nbsp&nbsp&nbsp</label>\
							  <input id="report-other" class="form-check-input" type="radio" name="reportTypeRadioButton" value="other">\
							</div>\
						</div>\
					</div>\
					<div id="report-captcha-container" class="captcha-container mb-3"><p>...retrieving captcha...</p></div>\
					<input id="report-captcha-input" class="swal2-input" placeholder="captcha">\
					<span id="report-error-message"></span>';
				
				Swal.fire({
					title: modalTitle,
					html: html,
					showCloseButton: true,
					confirmButtonText: 'submit',
					focusConfirm: false,
					willOpen: () => {
						getCaptcha(captchaUrl)
						.then((objectURL) => {
							$('#report-captcha-input').on('keypress', function(event) {
								if (event.keyCode === 13) {
									Swal.clickConfirm();
								}
							});
							
							$('#report-captcha-container').html('<img src="' + objectURL + '">');
						})
						.catch(error => {
							$('#report-error-message').text(error);
						});
					},
					preConfirm: () => {
						Swal.disableButtons();
						
						const message = Swal.getHtmlContainer().querySelector('#report-message-textarea').value;
						const email = Swal.getHtmlContainer().querySelector('#report-email-input').value;
						
						var reportType = '';
						const reportTypeRadioButtons = Swal.getHtmlContainer().querySelectorAll('input[name="reportTypeRadioButton"]');
						reportTypeRadioButtons.forEach(reportTypeButton => {
							if (reportTypeButton.checked) {
								reportType = reportTypeButton.value;
							}
						});
						
						const captchaResponse = Swal.getHtmlContainer().querySelector('#report-captcha-input').value;
						
						$.ajax({type: 'POST', url: submitUrl, data: { message: message, email: email, reportType: reportType, captchaResponse: captchaResponse }})
						.always(function() {
							Swal.enableButtons();
						})
						.done(function (data, textStatus, xhr) {
							if(data.isError) {
								$('#report-captcha-input').val('');
								$('#report-error-message').text(data.message);
								
								if(data.message == 'the captcha was not correct') {
									getCaptcha(captchaUrl)
									.then((objectURL) => {
										$('#report-captcha-container').html('<img src="' + objectURL + '">');
									})
									.catch(error => {
										$('#report-error-message').text(error);
									});
								}
							}
							else {
								Swal.close();
							}
						})
						.fail(function() {
							$('#report-error-message').text('...something went wrong...');
						});
						
						return false;
					}
				});
			}

			function showSettings() {
				if(typeof(Storage) != null) {
					var value = localStorage.getItem('dark-mode-enabled') === 'true';
					
					if(value) {
						$('#darkModeSwitch').prop('checked', true);
					}
					else {
						$('#darkModeSwitch').prop('checked', false);
					}
					
					$('#darkModeSwitch').off('change');
					$('#darkModeSwitch').change(async function() {
						IS_DARK_MODE_ENABLED = $('#darkModeSwitch').prop('checked');
						
						if(IS_DARK_MODE_ENABLED) {
							$('#dark-mode-style').prop('disabled', false);
						}
						else {
							$('#dark-mode-style').prop('disabled', true);
						}
						
						if(typeof(Storage) != null) {
							localStorage.setItem('dark-mode-enabled', IS_DARK_MODE_ENABLED);
						}
						else {
							console.log('localStorage is not supported in this browser.');
						}
					});
				}
				else {
					console.log('localStorage is not supported in this browser.');
				}
			}
			
			function getCaptcha(captchaUrl) {
				return new Promise(function(resolve, reject) {
					fetch(captchaUrl)
					.then(response => {
						if (response.ok) {
							return response.blob();
						}
						throw new Error('...something went wrong...');
					})
					.then(blob => {
						const objectURL = URL.createObjectURL(blob);
						
						resolve(objectURL);
					})
					.catch(error => {
						reject(error.message);
					});
				});
			}
			
			function getViewsFormatted(views) {
				var totalViews = '';
				
				if(views === 1) {
					totalViews = 1 + ' view';
				}
				else {
					totalViews = views + ' views';
				}
				
				return totalViews;
			}
			
			function getCreationTimestampFormatted(creationTimestamp) {
				var timeElapsed = '';
				
				const timeDifference = Date.now() - creationTimestamp;
				
				if (timeDifference < 60000) {
					timeElapsed = "just now"
				} else if (timeDifference < 3600000) {
					const minutes = Math.floor(timeDifference / 60000);
					if (minutes === 1) {
						timeElapsed = "1 minute ago"
					} else if (minutes === 0 || minutes > 1) {
						timeElapsed = minutes + " minutes ago"
					}
				} else if (timeDifference < 86400000) {
					const hours = Math.floor(timeDifference / 3600000);
					if (hours === 1) {
						timeElapsed = "1 hour ago"
					} else if (hours === 0 || hours > 1) {
						timeElapsed = hours + " hours ago"
					}
				} else if (timeDifference < 2592000000) {
					const days = Math.floor(timeDifference / 86400000);
					if (days === 1) {
						timeElapsed = "1 day ago"
					} else if (days === 0 || days > 1) {
						timeElapsed = days + " days ago"
					}
				} else if (timeDifference < 31536000000) {
					const months = Math.floor(timeDifference / 2592000000);
					if (months === 1) {
						timeElapsed = "1 month ago"
					} else if (months === 0 || months > 1) {
						timeElapsed = months + " months ago"
					}
				} else {
					const years = Math.floor(timeDifference / 31536000000);
					if (years === 1) {
						timeElapsed = "1 year ago"
					} else if (years === 0 || years > 1) {
						timeElapsed = years + " years ago"
					}
				}
				
				return timeElapsed;
			}
			
			function showCommentInputFormCaptcha(button) {
				const captchaType = $(button).data('captchatype');
				
				if(captchaType === 'static') {
					$('#comment-input-form-static-captcha-container').addClass('hidden-elem');
					$('#comment-input-form-static-submit-container').removeClass('hidden-elem');
				}
				else if(captchaType === 'dynamic') {
					$('#comment-input-form-dynamic-captcha-container').addClass('hidden-elem');
					$('#comment-input-form-dynamic-submit-container').removeClass('hidden-elem');
				}
				
				getCaptcha('/captcha/comments?captchaType=' + captchaType)
				.then((objectURL) => {
					if(captchaType === 'static') {
						$('#comment-input-form-static-captcha').html('<img src="' + objectURL + '">');
					}
					else if(captchaType === 'dynamic') {
						$('#comment-input-form-dynamic-captcha').html('<img src="' + objectURL + '">');
					}
				})
				.catch(error => {
					if(captchaType === 'static') {
						$('#comment-input-form-static-error-message').text('...something went wrong...');
					}
					else if(captchaType === 'dynamic') {
						$('#comment-input-form-dynamic-error-message').text('...something went wrong...');
					}
				});
			}
			
			function quote(commentId) {
				$(COMMENT_INPUT_FORM_DYNAMIC).remove();

				let textarea = $(COMMENT_INPUT_FORM_DYNAMIC).find('textarea');

				let start_position = $(textarea)[0].selectionStart;
				let end_position = $(textarea)[0].selectionEnd;

				$(textarea).val(function (index, value) {
					return value.substring(0, start_position) + '>>' + commentId + '\n' + value.substring(end_position);
				});

				$('#p' + commentId).append(COMMENT_INPUT_FORM_DYNAMIC);

				$(textarea).each(function () {
					this.setAttribute("style", "height:" + (this.scrollHeight) + "px;overflow-y:hidden;resize:none;");
				}).on("input", function () {
					this.style.height = 0;
					this.style.height = (this.scrollHeight) + "px";
				});

				$(textarea).focus();
			}
			
			function convertSecondsToDurationFormatted(seconds) {
				seconds = Math.floor(seconds);
				
				const years = Math.floor(seconds / (3600 * 24 * 365));
				
				seconds -= years * (3600 * 24 * 365);

				const days = Math.floor(seconds / (3600 * 24));
				
				seconds -= days * (3600 * 24);

				const hours = Math.floor(seconds / 3600);
				
				seconds -= hours * 3600;

				const minutes = Math.floor(seconds / 60);
				
				seconds -= minutes * 60;

				let durationFormatted = '';

				if (years > 0) {
					durationFormatted += years + ' years, ';
				}

				if (days > 0) {
					durationFormatted += days + ' days, ';
				}

				if (hours > 0 || years > 0 || days > 0) {
					durationFormatted += hours + ':';
				}

				if (minutes < 10 && (hours > 0 || years > 0 || days > 0)) {
					durationFormatted += '0';
				}
				
				durationFormatted += minutes + ':';

				if (seconds < 10) {
					durationFormatted += '0';
				}
				
				durationFormatted += seconds;

				return durationFormatted;
			}
		</script>
	</body>
</html>